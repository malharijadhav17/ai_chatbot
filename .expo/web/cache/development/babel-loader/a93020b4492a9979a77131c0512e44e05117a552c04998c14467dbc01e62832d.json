{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\ai_chatbot\\\\App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport axios from \"axios\";\nimport { Provider as PaperProvider, Button } from \"react-native-paper\";\nimport Clipboard from '@react-native-clipboard/clipboard';\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { oneDark, coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const [input, setInput] = useState(\"\");\n  const [currentChat, setCurrentChat] = useState([]);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [selectedChatIndex, setSelectedChatIndex] = useState(null);\n  const [theme, setTheme] = useState(\"dark\");\n  const currentProcessId = useRef(null);\n  const isCancelled = useRef(false);\n  const API_KEY = \"AIzaSyBynUKwAktNRwPh_bl0DmBu6owJ5Uc5ux8\";\n  useEffect(() => {\n    loadTheme();\n    loadChatHistory();\n  }, []);\n  useEffect(() => {\n    if (selectedChatIndex !== null) {\n      saveChatHistory();\n    }\n  }, [currentChat]);\n  const loadTheme = async () => {\n    const savedTheme = await AsyncStorage.getItem(\"theme\");\n    if (savedTheme) setTheme(savedTheme);\n  };\n  const toggleTheme = async () => {\n    const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n    setTheme(newTheme);\n    await AsyncStorage.setItem(\"theme\", newTheme);\n  };\n  const loadChatHistory = async () => {\n    const savedHistory = await AsyncStorage.getItem(\"chatHistory\");\n    if (savedHistory) setChatHistory(JSON.parse(savedHistory));\n  };\n  const saveChatHistory = async () => {\n    await AsyncStorage.setItem(\"chatHistory\", JSON.stringify(chatHistory));\n  };\n  const startNewChat = () => {\n    cancelRunningResponse();\n    const newSession = {\n      id: Date.now(),\n      messages: []\n    };\n    setChatHistory([...chatHistory, newSession]);\n    setSelectedChatIndex(chatHistory.length);\n    setCurrentChat([]);\n  };\n  const loadChat = index => {\n    cancelRunningResponse();\n    setSelectedChatIndex(index);\n    setCurrentChat(chatHistory[index].messages || []);\n  };\n  const deleteChat = index => {\n    cancelRunningResponse();\n    const updatedHistory = chatHistory.filter((_, i) => i !== index);\n    setChatHistory(updatedHistory);\n    setSelectedChatIndex(null);\n    setCurrentChat([]);\n    saveChatHistory();\n  };\n  const cancelRunningResponse = () => {\n    isCancelled.current = true;\n    currentProcessId.current = null;\n  };\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    cancelRunningResponse();\n    isCancelled.current = false;\n    let updatedChat = [...currentChat, {\n      text: input,\n      type: \"user\"\n    }];\n    setCurrentChat(updatedChat);\n    setInput(\"\");\n    try {\n      const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`, {\n        contents: [{\n          parts: [{\n            text: input\n          }]\n        }]\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const replyParts = response.data?.candidates?.[0]?.content?.parts || [];\n      let reply = replyParts.map(part => part.text).join(\"\\n\");\n      const processId = Date.now();\n      currentProcessId.current = processId;\n      const activeSession = selectedChatIndex;\n      await processResponse(reply, processId, activeSession);\n    } catch (error) {\n      setCurrentChat([...updatedChat, {\n        text: \"Error: Unable to fetch response\",\n        type: \"bot\"\n      }]);\n    }\n  };\n  const processResponse = async (responseText, processId, activeSession) => {\n    let reply = \"\";\n    const botMessage = {\n      text: \"\",\n      type: \"bot\"\n    };\n    setCurrentChat(prev => [...prev, botMessage]);\n    for (const char of responseText) {\n      if (isCancelled.current || currentProcessId.current !== processId || selectedChatIndex !== activeSession) {\n        break;\n      }\n      reply += char;\n      setCurrentChat(prev => {\n        const updated = [...prev];\n        updated[updated.length - 1] = {\n          text: reply,\n          type: \"bot\"\n        };\n        return updated;\n      });\n      await new Promise(resolve => setTimeout(resolve, 20));\n    }\n  };\n  const copyToClipboard = text => {\n    Clipboard.setString(text);\n    Alert.alert(\"Copied to Clipboard\", text);\n  };\n  return _jsxDEV(PaperProvider, {\n    children: _jsxDEV(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n      style: {\n        flex: 1,\n        backgroundColor: theme === \"dark\" ? \"#121212\" : \"#ffffff\",\n        padding: 10\n      },\n      children: [_jsxDEV(View, {\n        style: styles.header,\n        children: [_jsxDEV(Text, {\n          style: {\n            fontSize: 20,\n            color: theme === \"dark\" ? \"#fff\" : \"#000\"\n          },\n          children: \"Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), _jsxDEV(Button, {\n          mode: \"contained\",\n          onPress: toggleTheme,\n          children: theme === \"dark\" ? \"Light Mode\" : \"Dark Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), _jsxDEV(FlatList, {\n        data: currentChat,\n        keyExtractor: (item, index) => index.toString(),\n        renderItem: ({\n          item\n        }) => _jsxDEV(View, {\n          style: {\n            marginVertical: 5,\n            alignSelf: item.type === \"user\" ? \"flex-end\" : \"flex-start\"\n          },\n          children: item.type === \"bot\" ? _jsxDEV(View, {\n            style: styles.botMessageContainer,\n            children: [_jsxDEV(SyntaxHighlighter, {\n              language: \"plaintext\",\n              style: theme === \"dark\" ? oneDark : coy,\n              children: item.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 19\n            }, this), _jsxDEV(TouchableOpacity, {\n              onPress: () => copyToClipboard(item.text),\n              style: styles.copyButton,\n              children: _jsxDEV(Text, {\n                style: styles.copyButtonText,\n                children: \"Copy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this) : _jsxDEV(Text, {\n            style: styles.userMessage,\n            children: item.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.inputContainer,\n        children: [_jsxDEV(TextInput, {\n          style: styles.input(theme),\n          value: input,\n          onChangeText: setInput,\n          placeholder: \"Type a message...\",\n          placeholderTextColor: theme === \"dark\" ? \"#bbb\" : \"#777\",\n          onSubmitEditing: sendMessage,\n          returnKeyType: \"send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), _jsxDEV(TouchableOpacity, {\n          style: styles.sendButton,\n          onPress: sendMessage,\n          children: _jsxDEV(Text, {\n            style: styles.sendText,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 10\n  },\n  userMessage: {\n    color: \"#fff\",\n    backgroundColor: \"#6200ee\",\n    padding: 10,\n    borderRadius: 10\n  },\n  botMessageContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  copyButton: {\n    marginLeft: 5,\n    backgroundColor: \"#6200ee\",\n    padding: 5,\n    borderRadius: 5\n  },\n  copyButtonText: {\n    color: \"#fff\",\n    fontSize: 14\n  },\n  inputContainer: {\n    flexDirection: \"row\",\n    padding: 10\n  },\n  input: theme => ({\n    flex: 1,\n    padding: 10,\n    borderWidth: 1,\n    borderRadius: 10,\n    color: theme === \"dark\" ? \"#fff\" : \"#000\",\n    borderColor: theme === \"dark\" ? \"#fff\" : \"#333\",\n    backgroundColor: theme === \"dark\" ? \"#333\" : \"#f0f0f0\"\n  }),\n  sendButton: {\n    backgroundColor: \"#6200ee\",\n    padding: 10,\n    borderRadius: 10,\n    marginLeft: 10\n  },\n  sendText: {\n    color: \"#fff\"\n  }\n});\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","Text","TextInput","TouchableOpacity","FlatList","StyleSheet","KeyboardAvoidingView","Platform","Alert","AsyncStorage","axios","Provider","PaperProvider","Button","Clipboard","Prism","SyntaxHighlighter","oneDark","coy","jsxDEV","_jsxDEV","App","input","setInput","currentChat","setCurrentChat","chatHistory","setChatHistory","selectedChatIndex","setSelectedChatIndex","theme","setTheme","currentProcessId","isCancelled","API_KEY","loadTheme","loadChatHistory","saveChatHistory","savedTheme","getItem","toggleTheme","newTheme","setItem","savedHistory","JSON","parse","stringify","startNewChat","cancelRunningResponse","newSession","id","Date","now","messages","length","loadChat","index","deleteChat","updatedHistory","filter","_","i","current","sendMessage","trim","updatedChat","text","type","response","post","contents","parts","headers","replyParts","data","candidates","content","reply","map","part","join","processId","activeSession","processResponse","error","responseText","botMessage","prev","char","updated","Promise","resolve","setTimeout","copyToClipboard","setString","alert","children","behavior","OS","style","flex","backgroundColor","padding","styles","header","fontSize","color","fileName","_jsxFileName","lineNumber","columnNumber","mode","onPress","keyExtractor","item","toString","renderItem","marginVertical","alignSelf","botMessageContainer","language","copyButton","copyButtonText","userMessage","inputContainer","value","onChangeText","placeholder","placeholderTextColor","onSubmitEditing","returnKeyType","sendButton","sendText","create","flexDirection","justifyContent","borderRadius","alignItems","marginLeft","borderWidth","borderColor"],"sources":["C:/Users/Admin/Downloads/ai_chatbot/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { View, Text, TextInput, TouchableOpacity, FlatList, StyleSheet, KeyboardAvoidingView, Platform, Alert } from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport axios from \"axios\";\nimport { Provider as PaperProvider, Button } from \"react-native-paper\";\nimport Clipboard from '@react-native-clipboard/clipboard';\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { oneDark, coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nconst App = () => {\n  const [input, setInput] = useState(\"\");\n  const [currentChat, setCurrentChat] = useState([]);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [selectedChatIndex, setSelectedChatIndex] = useState(null);\n  const [theme, setTheme] = useState(\"dark\");\n  const currentProcessId = useRef(null);\n  const isCancelled = useRef(false);\n  const API_KEY = \"AIzaSyBynUKwAktNRwPh_bl0DmBu6owJ5Uc5ux8\";\n\n  useEffect(() => {\n    loadTheme();\n    loadChatHistory();\n  }, []);\n\n  useEffect(() => {\n    if (selectedChatIndex !== null) {\n      saveChatHistory();\n    }\n  }, [currentChat]);\n\n  const loadTheme = async () => {\n    const savedTheme = await AsyncStorage.getItem(\"theme\");\n    if (savedTheme) setTheme(savedTheme);\n  };\n\n  const toggleTheme = async () => {\n    const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n    setTheme(newTheme);\n    await AsyncStorage.setItem(\"theme\", newTheme);\n  };\n\n  const loadChatHistory = async () => {\n    const savedHistory = await AsyncStorage.getItem(\"chatHistory\");\n    if (savedHistory) setChatHistory(JSON.parse(savedHistory));\n  };\n\n  const saveChatHistory = async () => {\n    await AsyncStorage.setItem(\"chatHistory\", JSON.stringify(chatHistory));\n  };\n\n  const startNewChat = () => {\n    cancelRunningResponse();\n    const newSession = { id: Date.now(), messages: [] };\n    setChatHistory([...chatHistory, newSession]);\n    setSelectedChatIndex(chatHistory.length);\n    setCurrentChat([]);\n  };\n\n  const loadChat = (index) => {\n    cancelRunningResponse();\n    setSelectedChatIndex(index);\n    setCurrentChat(chatHistory[index].messages || []);\n  };\n\n  const deleteChat = (index) => {\n    cancelRunningResponse();\n    const updatedHistory = chatHistory.filter((_, i) => i !== index);\n    setChatHistory(updatedHistory);\n    setSelectedChatIndex(null);\n    setCurrentChat([]);\n    saveChatHistory();\n  };\n\n  const cancelRunningResponse = () => {\n    isCancelled.current = true;\n    currentProcessId.current = null;\n  };\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    cancelRunningResponse();\n    isCancelled.current = false;\n\n    let updatedChat = [...currentChat, { text: input, type: \"user\" }];\n    setCurrentChat(updatedChat);\n    setInput(\"\");\n\n    try {\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`,\n        { contents: [{ parts: [{ text: input }] }] },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n\n      const replyParts = response.data?.candidates?.[0]?.content?.parts || [];\n      let reply = replyParts.map((part) => part.text).join(\"\\n\");\n      const processId = Date.now();\n      currentProcessId.current = processId;\n      const activeSession = selectedChatIndex;\n      await processResponse(reply, processId, activeSession);\n    } catch (error) {\n      setCurrentChat([...updatedChat, { text: \"Error: Unable to fetch response\", type: \"bot\" }]);\n    }\n  };\n\n  const processResponse = async (responseText, processId, activeSession) => {\n    let reply = \"\";\n    const botMessage = { text: \"\", type: \"bot\" };\n    setCurrentChat((prev) => [...prev, botMessage]);\n\n    for (const char of responseText) {\n      if (isCancelled.current || currentProcessId.current !== processId || selectedChatIndex !== activeSession) {\n        break;\n      }\n      reply += char;\n      setCurrentChat((prev) => {\n        const updated = [...prev];\n        updated[updated.length - 1] = { text: reply, type: \"bot\" };\n        return updated;\n      });\n      await new Promise((resolve) => setTimeout(resolve, 20));\n    }\n  };\n\n  const copyToClipboard = (text) => {\n    Clipboard.setString(text);\n    Alert.alert(\"Copied to Clipboard\", text);\n  };\n\n  return (\n    <PaperProvider>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        style={{\n          flex: 1,\n          backgroundColor: theme === \"dark\" ? \"#121212\" : \"#ffffff\",\n          padding: 10,\n        }}\n      >\n        {/* Header Section */}\n        <View style={styles.header}>\n          <Text style={{ fontSize: 20, color: theme === \"dark\" ? \"#fff\" : \"#000\" }}>\n            Chatbot\n          </Text>\n          <Button mode=\"contained\" onPress={toggleTheme}>\n            {theme === \"dark\" ? \"Light Mode\" : \"Dark Mode\"}\n          </Button>\n        </View>\n\n        <FlatList\n          data={currentChat}\n          keyExtractor={(item, index) => index.toString()}\n          renderItem={({ item }) => (\n            <View style={{ marginVertical: 5, alignSelf: item.type === \"user\" ? \"flex-end\" : \"flex-start\" }}>\n              {item.type === \"bot\" ? (\n                <View style={styles.botMessageContainer}>\n                  <SyntaxHighlighter language=\"plaintext\" style={theme === \"dark\" ? oneDark : coy}>\n                    {item.text}\n                  </SyntaxHighlighter>\n                  <TouchableOpacity onPress={() => copyToClipboard(item.text)} style={styles.copyButton}>\n                    <Text style={styles.copyButtonText}>Copy</Text>\n                  </TouchableOpacity>\n                </View>\n              ) : (\n                <Text style={styles.userMessage}>{item.text}</Text>\n              )}\n            </View>\n          )}\n        />\n\n        {/* Input Section */}\n        <View style={styles.inputContainer}>\n          <TextInput\n            style={styles.input(theme)}\n            value={input}\n            onChangeText={setInput}\n            placeholder=\"Type a message...\"\n            placeholderTextColor={theme === \"dark\" ? \"#bbb\" : \"#777\"}\n            onSubmitEditing={sendMessage} // Handle Enter key press\n            returnKeyType=\"send\" // Show \"Send\" button on the keyboard\n          />\n\n\n          <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>\n            <Text style={styles.sendText}>Send</Text>\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    </PaperProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  header: { flexDirection: \"row\", justifyContent: \"space-between\", padding: 10 },\n  userMessage: { color: \"#fff\", backgroundColor: \"#6200ee\", padding: 10, borderRadius: 10 },\n  botMessageContainer: { flexDirection: \"row\", alignItems: \"center\" },\n  copyButton: { marginLeft: 5, backgroundColor: \"#6200ee\", padding: 5, borderRadius: 5 },\n  copyButtonText: { color: \"#fff\", fontSize: 14 },\n  inputContainer: { flexDirection: \"row\", padding: 10 },\n  input: (theme) => ({\n    flex: 1,\n    padding: 10,\n    borderWidth: 1,\n    borderRadius: 10,\n    color: theme === \"dark\" ? \"#fff\" : \"#000\", // White text in dark mode, black in light mode\n    borderColor: theme === \"dark\" ? \"#fff\" : \"#333\", // White border in dark mode, dark gray in light mode\n    backgroundColor: theme === \"dark\" ? \"#333\" : \"#f0f0f0\", // Dark gray background in dark mode, light gray in light mode\n  }), sendButton: { backgroundColor: \"#6200ee\", padding: 10, borderRadius: 10, marginLeft: 10 },\n  sendText: { color: \"#fff\" },\n});\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}