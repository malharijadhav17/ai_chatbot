{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"name\",\"size\",\"color\",\"style\",\"children\"];import React,{PureComponent}from'react';import PropTypes from'prop-types';import Platform from\"react-native-web/dist/exports/Platform\";import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";import processColor from\"react-native-web/dist/exports/processColor\";import Text from\"react-native-web/dist/exports/Text\";import ensureNativeModuleAvailable from'./ensure-native-module-available';import createIconSourceCache from'./create-icon-source-cache';import createIconButtonComponent from'./icon-button';import NativeIconAPI from'./NativeRNVectorIcons';import{jsxs as _jsxs}from\"react/jsx-runtime\";export const DEFAULT_ICON_SIZE=12;export const DEFAULT_ICON_COLOR='black';export default function createIconSet(glyphMap,fontFamily,fontFile,fontStyle){const fontBasename=fontFile?fontFile.replace(/\\.(otf|ttf)$/,''):fontFamily;const fontReference=fontBasename;const IconNamePropType=PropTypes.oneOf(Object.keys(glyphMap));class Icon extends PureComponent{static propTypes={allowFontScaling:PropTypes.bool,name:IconNamePropType,size:PropTypes.number,color:PropTypes.any,children:PropTypes.node,style:PropTypes.any};static defaultProps={size:DEFAULT_ICON_SIZE,allowFontScaling:false};render(){const _this$props=this.props,{name,size,color,style,children}=_this$props,props=_objectWithoutPropertiesLoose(_this$props,_excluded);let glyph=name?glyphMap[name]||'?':'';if(typeof glyph==='number'){glyph=String.fromCodePoint(glyph);}const styleDefaults={fontSize:size,color};const styleOverrides={fontFamily:fontReference,fontWeight:'normal',fontStyle:'normal'};props.style=[styleDefaults,style,styleOverrides,fontStyle||{}];return _jsxs(Text,Object.assign({selectable:false},props,{children:[glyph,children]}));}}const imageSourceCache=createIconSourceCache();function resolveGlyph(name){const glyph=glyphMap[name]||'?';if(typeof glyph==='number'){return String.fromCodePoint(glyph);}return glyph;}function getImageSourceSync(name,size=DEFAULT_ICON_SIZE,color=DEFAULT_ICON_COLOR){ensureNativeModuleAvailable();const glyph=resolveGlyph(name);const processedColor=processColor(color);const cacheKey=`${glyph}:${size}:${processedColor}`;if(imageSourceCache.has(cacheKey)){return imageSourceCache.get(cacheKey);}try{const imagePath=NativeIconAPI.getImageForFontSync(fontReference,glyph,size,processedColor);const value={uri:imagePath,scale:PixelRatio.get()};imageSourceCache.setValue(cacheKey,value);return value;}catch(error){imageSourceCache.setError(cacheKey,error);throw error;}}async function getImageSource(name,size=DEFAULT_ICON_SIZE,color=DEFAULT_ICON_COLOR){ensureNativeModuleAvailable();const glyph=resolveGlyph(name);const processedColor=processColor(color);const cacheKey=`${glyph}:${size}:${processedColor}`;if(imageSourceCache.has(cacheKey)){return imageSourceCache.get(cacheKey);}try{const imagePath=await NativeIconAPI.getImageForFont(fontReference,glyph,size,processedColor);const value={uri:imagePath,scale:PixelRatio.get()};imageSourceCache.setValue(cacheKey,value);return value;}catch(error){imageSourceCache.setError(cacheKey,error);throw error;}}async function loadFont(file=fontFile){if(false){ensureNativeModuleAvailable();if(!file){throw new Error('Unable to load font, because no file was specified. ');}await NativeIconAPI.loadFontWithFileName(...file.split('.'));}}function hasIcon(name){return Object.prototype.hasOwnProperty.call(glyphMap,name);}function getRawGlyphMap(){return glyphMap;}function getFontFamily(){return fontReference;}Icon.Button=createIconButtonComponent(Icon);Icon.getImageSource=getImageSource;Icon.getImageSourceSync=getImageSourceSync;Icon.loadFont=loadFont;Icon.hasIcon=hasIcon;Icon.getRawGlyphMap=getRawGlyphMap;Icon.getFontFamily=getFontFamily;return Icon;}","map":{"version":3,"names":["React","PureComponent","PropTypes","Platform","PixelRatio","processColor","Text","ensureNativeModuleAvailable","createIconSourceCache","createIconButtonComponent","NativeIconAPI","jsxs","_jsxs","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","IconNamePropType","oneOf","Object","keys","Icon","propTypes","allowFontScaling","bool","name","size","number","color","any","children","node","style","defaultProps","render","_this$props","props","_objectWithoutPropertiesLoose","_excluded","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","assign","selectable","imageSourceCache","resolveGlyph","getImageSourceSync","processedColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","Error","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button"],"sources":["C:/Users/Admin/Downloads/ai_chatbot/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Platform, PixelRatio, processColor, Text } from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\nimport NativeIconAPI from './NativeRNVectorIcons';\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}