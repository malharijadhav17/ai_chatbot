{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"icon\",\"iconColor\",\"containerColor\",\"rippleColor\",\"size\",\"accessibilityLabel\",\"disabled\",\"onPress\",\"selected\",\"animated\",\"mode\",\"style\",\"theme\",\"testID\",\"loading\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{getIconButtonColor}from'./utils';import{useInternalTheme}from'../../core/theming';import{forwardRef}from'../../utils/forwardRef';import ActivityIndicator from'../ActivityIndicator';import CrossFadeIcon from'../CrossFadeIcon';import Icon from'../Icon';import Surface from'../Surface';import TouchableRipple from'../TouchableRipple/TouchableRipple';const PADDING=8;const IconButton=forwardRef((_ref,ref)=>{let{icon,iconColor:customIconColor,containerColor:customContainerColor,rippleColor:customRippleColor,size=24,accessibilityLabel,disabled,onPress,selected=false,animated=false,mode,style,theme:themeOverrides,testID='icon-button',loading=false}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const theme=useInternalTheme(themeOverrides);const{isV3}=theme;const IconComponent=animated?CrossFadeIcon:Icon;const{iconColor,rippleColor,backgroundColor,borderColor}=getIconButtonColor({theme,disabled,selected,mode,customIconColor,customContainerColor,customRippleColor});const buttonSize=isV3?size+2*PADDING:size*1.5;const{borderWidth=isV3&&mode==='outlined'&&!selected?1:0,borderRadius=buttonSize/2}=StyleSheet.flatten(style)||{};const borderStyles={borderWidth,borderRadius,borderColor};return React.createElement(Surface,_extends({ref:ref,testID:`${testID}-container`,style:[{backgroundColor,width:buttonSize,height:buttonSize},styles.container,borderStyles,!isV3&&disabled&&styles.disabled,style]},isV3&&{elevation:0}),React.createElement(TouchableRipple,_extends({borderless:true,centered:true,onPress:onPress,rippleColor:rippleColor,accessibilityLabel:accessibilityLabel,style:[styles.touchable,{borderRadius}],accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityState:{disabled},disabled:disabled,hitSlop:TouchableRipple.supported?{top:10,left:10,bottom:10,right:10}:{top:6,left:6,bottom:6,right:6},testID:testID},rest),loading?React.createElement(ActivityIndicator,{size:size,color:iconColor}):React.createElement(IconComponent,{color:iconColor,source:icon,size:size})));});const styles=StyleSheet.create({container:{overflow:'hidden',margin:6,elevation:0},touchable:{flexGrow:1,justifyContent:'center',alignItems:'center'},disabled:{opacity:0.32}});export default IconButton;","map":{"version":3,"names":["React","StyleSheet","getIconButtonColor","useInternalTheme","forwardRef","ActivityIndicator","CrossFadeIcon","Icon","Surface","TouchableRipple","PADDING","IconButton","_ref","ref","icon","iconColor","customIconColor","containerColor","customContainerColor","rippleColor","customRippleColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","style","theme","themeOverrides","testID","loading","rest","_objectWithoutPropertiesLoose","_excluded","isV3","IconComponent","backgroundColor","borderColor","buttonSize","borderWidth","borderRadius","flatten","borderStyles","createElement","_extends","width","height","styles","container","elevation","borderless","centered","touchable","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","color","source","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\IconButton\\IconButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n  Animated,\n  ColorValue,\n} from 'react-native';\n\nimport { getIconButtonColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport ActivityIndicator from '../ActivityIndicator';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\n\nconst PADDING = 8;\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\nexport type Props = Omit<$RemoveChildren<typeof TouchableRipple>, 'style'> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\n   */\n  mode?: IconButtonMode;\n  /**\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\n   * Color of the icon.\n   */\n  iconColor?: string;\n  /**\n   * Background color of the icon container.\n   */\n  containerColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\n   */\n  selected?: boolean;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  ref?: React.RefObject<View>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\n */\nconst IconButton = forwardRef<View, Props>(\n  (\n    {\n      icon,\n      iconColor: customIconColor,\n      containerColor: customContainerColor,\n      rippleColor: customRippleColor,\n      size = 24,\n      accessibilityLabel,\n      disabled,\n      onPress,\n      selected = false,\n      animated = false,\n      mode,\n      style,\n      theme: themeOverrides,\n      testID = 'icon-button',\n      loading = false,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n    const { isV3 } = theme;\n\n    const IconComponent = animated ? CrossFadeIcon : Icon;\n\n    const { iconColor, rippleColor, backgroundColor, borderColor } =\n      getIconButtonColor({\n        theme,\n        disabled,\n        selected,\n        mode,\n        customIconColor,\n        customContainerColor,\n        customRippleColor,\n      });\n\n    const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n\n    const {\n      borderWidth = isV3 && mode === 'outlined' && !selected ? 1 : 0,\n      borderRadius = buttonSize / 2,\n    } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n    const borderStyles = {\n      borderWidth,\n      borderRadius,\n      borderColor,\n    };\n\n    return (\n      <Surface\n        ref={ref}\n        testID={`${testID}-container`}\n        style={[\n          {\n            backgroundColor,\n            width: buttonSize,\n            height: buttonSize,\n          },\n          styles.container,\n          borderStyles,\n          !isV3 && disabled && styles.disabled,\n          style,\n        ]}\n        {...(isV3 && { elevation: 0 })}\n      >\n        <TouchableRipple\n          borderless\n          centered\n          onPress={onPress}\n          rippleColor={rippleColor}\n          accessibilityLabel={accessibilityLabel}\n          style={[styles.touchable, { borderRadius }]}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ disabled }}\n          disabled={disabled}\n          hitSlop={\n            TouchableRipple.supported\n              ? { top: 10, left: 10, bottom: 10, right: 10 }\n              : { top: 6, left: 6, bottom: 6, right: 6 }\n          }\n          testID={testID}\n          {...rest}\n        >\n          {loading ? (\n            <ActivityIndicator size={size} color={iconColor} />\n          ) : (\n            <IconComponent color={iconColor} source={icon} size={size} />\n          )}\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0,\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default IconButton;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}