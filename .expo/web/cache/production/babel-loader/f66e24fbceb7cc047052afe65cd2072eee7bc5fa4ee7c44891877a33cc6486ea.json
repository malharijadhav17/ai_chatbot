{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import FlatList from\"react-native-web/dist/exports/FlatList\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import KeyboardAvoidingView from\"react-native-web/dist/exports/KeyboardAvoidingView\";import Platform from\"react-native-web/dist/exports/Platform\";import Alert from\"react-native-web/dist/exports/Alert\";import AsyncStorage from\"@react-native-async-storage/async-storage\";import axios from\"axios\";import{Provider as PaperProvider,Button}from\"react-native-paper\";import Clipboard from'@react-native-clipboard/clipboard';import{Prism as SyntaxHighlighter}from\"react-syntax-highlighter\";import{oneDark,coy}from\"react-syntax-highlighter/dist/esm/styles/prism\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[input,setInput]=useState(\"\");const[currentChat,setCurrentChat]=useState([]);const[chatHistory,setChatHistory]=useState([]);const[selectedChatIndex,setSelectedChatIndex]=useState(null);const[theme,setTheme]=useState(\"dark\");const currentProcessId=useRef(null);const isCancelled=useRef(false);const API_KEY=\"AIzaSyBynUKwAktNRwPh_bl0DmBu6owJ5Uc5ux8\";useEffect(()=>{loadTheme();loadChatHistory();},[]);useEffect(()=>{if(selectedChatIndex!==null){saveChatHistory();}},[currentChat]);const loadTheme=async()=>{const savedTheme=await AsyncStorage.getItem(\"theme\");if(savedTheme)setTheme(savedTheme);};const toggleTheme=async()=>{const newTheme=theme===\"dark\"?\"light\":\"dark\";setTheme(newTheme);await AsyncStorage.setItem(\"theme\",newTheme);};const loadChatHistory=async()=>{const savedHistory=await AsyncStorage.getItem(\"chatHistory\");if(savedHistory)setChatHistory(JSON.parse(savedHistory));};const saveChatHistory=async()=>{await AsyncStorage.setItem(\"chatHistory\",JSON.stringify(chatHistory));};const startNewChat=()=>{cancelRunningResponse();const newSession={id:Date.now(),messages:[]};setChatHistory([...chatHistory,newSession]);setSelectedChatIndex(chatHistory.length);setCurrentChat([]);};const loadChat=index=>{cancelRunningResponse();setSelectedChatIndex(index);setCurrentChat(chatHistory[index].messages||[]);};const deleteChat=index=>{cancelRunningResponse();const updatedHistory=chatHistory.filter((_,i)=>i!==index);setChatHistory(updatedHistory);setSelectedChatIndex(null);setCurrentChat([]);saveChatHistory();};const cancelRunningResponse=()=>{isCancelled.current=true;currentProcessId.current=null;};const sendMessage=async()=>{if(!input.trim())return;cancelRunningResponse();isCancelled.current=false;let updatedChat=[...currentChat,{text:input,type:\"user\"}];setCurrentChat(updatedChat);setInput(\"\");try{const response=await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`,{contents:[{parts:[{text:input}]}]},{headers:{\"Content-Type\":\"application/json\"}});const replyParts=response.data?.candidates?.[0]?.content?.parts||[];let reply=replyParts.map(part=>part.text).join(\"\\n\");const processId=Date.now();currentProcessId.current=processId;const activeSession=selectedChatIndex;await processResponse(reply,processId,activeSession);}catch(error){setCurrentChat([...updatedChat,{text:\"Error: Unable to fetch response\",type:\"bot\"}]);}};const processResponse=async(responseText,processId,activeSession)=>{let reply=\"\";const botMessage={text:\"\",type:\"bot\"};setCurrentChat(prev=>[...prev,botMessage]);for(const char of responseText){if(isCancelled.current||currentProcessId.current!==processId||selectedChatIndex!==activeSession){break;}reply+=char;setCurrentChat(prev=>{const updated=[...prev];updated[updated.length-1]={text:reply,type:\"bot\"};return updated;});await new Promise(resolve=>setTimeout(resolve,20));}};const copyToClipboard=text=>{Clipboard.setString(text);Alert.alert(\"Copied to Clipboard\",text);};return _jsx(PaperProvider,{children:_jsxs(KeyboardAvoidingView,{behavior:false?\"padding\":\"height\",style:{flex:1,backgroundColor:theme===\"dark\"?\"#121212\":\"#ffffff\",padding:10},children:[_jsxs(View,{style:styles.header,children:[_jsx(Text,{style:{fontSize:20,color:theme===\"dark\"?\"#fff\":\"#000\"},children:\"Chatbot\"}),_jsx(Button,{mode:\"contained\",onPress:toggleTheme,children:theme===\"dark\"?\"Light Mode\":\"Dark Mode\"})]}),_jsx(FlatList,{data:currentChat,keyExtractor:(item,index)=>index.toString(),renderItem:({item})=>_jsx(View,{style:{marginVertical:5,alignSelf:item.type===\"user\"?\"flex-end\":\"flex-start\"},children:item.type===\"bot\"?_jsxs(View,{style:styles.botMessageContainer,children:[_jsx(SyntaxHighlighter,{language:\"plaintext\",style:theme===\"dark\"?oneDark:coy,children:item.text}),_jsx(TouchableOpacity,{onPress:()=>copyToClipboard(item.text),style:styles.copyButton,children:_jsx(Text,{style:styles.copyButtonText,children:\"Copy\"})})]}):_jsx(Text,{style:styles.userMessage,children:item.text})})}),_jsxs(View,{style:styles.inputContainer,children:[_jsx(TextInput,{style:styles.input(theme),value:input,onChangeText:setInput,placeholder:\"Type a message...\",placeholderTextColor:theme===\"dark\"?\"#bbb\":\"#777\",onSubmitEditing:sendMessage,returnKeyType:\"send\"}),_jsx(TouchableOpacity,{style:styles.sendButton,onPress:sendMessage,children:_jsx(Text,{style:styles.sendText,children:\"Send\"})})]})]})});};const styles=StyleSheet.create({header:{flexDirection:\"row\",justifyContent:\"space-between\",padding:10},userMessage:{color:\"#fff\",backgroundColor:\"#6200ee\",padding:10,borderRadius:10},botMessageContainer:{flexDirection:\"row\",alignItems:\"center\"},copyButton:{marginLeft:5,backgroundColor:\"#6200ee\",padding:5,borderRadius:5},copyButtonText:{color:\"#fff\",fontSize:14},inputContainer:{flexDirection:\"row\",padding:10},input:theme=>({flex:1,padding:10,borderWidth:1,borderRadius:10,color:theme===\"dark\"?\"#fff\":\"#000\",borderColor:theme===\"dark\"?\"#fff\":\"#333\",backgroundColor:theme===\"dark\"?\"#333\":\"#f0f0f0\"}),sendButton:{backgroundColor:\"#6200ee\",padding:10,borderRadius:10,marginLeft:10},sendText:{color:\"#fff\"}});export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","Text","TextInput","TouchableOpacity","FlatList","StyleSheet","KeyboardAvoidingView","Platform","Alert","AsyncStorage","axios","Provider","PaperProvider","Button","Clipboard","Prism","SyntaxHighlighter","oneDark","coy","jsx","_jsx","jsxs","_jsxs","App","input","setInput","currentChat","setCurrentChat","chatHistory","setChatHistory","selectedChatIndex","setSelectedChatIndex","theme","setTheme","currentProcessId","isCancelled","API_KEY","loadTheme","loadChatHistory","saveChatHistory","savedTheme","getItem","toggleTheme","newTheme","setItem","savedHistory","JSON","parse","stringify","startNewChat","cancelRunningResponse","newSession","id","Date","now","messages","length","loadChat","index","deleteChat","updatedHistory","filter","_","i","current","sendMessage","trim","updatedChat","text","type","response","post","contents","parts","headers","replyParts","data","candidates","content","reply","map","part","join","processId","activeSession","processResponse","error","responseText","botMessage","prev","char","updated","Promise","resolve","setTimeout","copyToClipboard","setString","alert","children","behavior","style","flex","backgroundColor","padding","styles","header","fontSize","color","mode","onPress","keyExtractor","item","toString","renderItem","marginVertical","alignSelf","botMessageContainer","language","copyButton","copyButtonText","userMessage","inputContainer","value","onChangeText","placeholder","placeholderTextColor","onSubmitEditing","returnKeyType","sendButton","sendText","create","flexDirection","justifyContent","borderRadius","alignItems","marginLeft","borderWidth","borderColor"],"sources":["C:/Users/Admin/Downloads/ai_chatbot/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { View, Text, TextInput, TouchableOpacity, FlatList, StyleSheet, KeyboardAvoidingView, Platform, Alert } from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport axios from \"axios\";\nimport { Provider as PaperProvider, Button } from \"react-native-paper\";\nimport Clipboard from '@react-native-clipboard/clipboard';\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { oneDark, coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nconst App = () => {\n  const [input, setInput] = useState(\"\");\n  const [currentChat, setCurrentChat] = useState([]);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [selectedChatIndex, setSelectedChatIndex] = useState(null);\n  const [theme, setTheme] = useState(\"dark\");\n  const currentProcessId = useRef(null);\n  const isCancelled = useRef(false);\n  const API_KEY = \"AIzaSyBynUKwAktNRwPh_bl0DmBu6owJ5Uc5ux8\";\n\n  useEffect(() => {\n    loadTheme();\n    loadChatHistory();\n  }, []);\n\n  useEffect(() => {\n    if (selectedChatIndex !== null) {\n      saveChatHistory();\n    }\n  }, [currentChat]);\n\n  const loadTheme = async () => {\n    const savedTheme = await AsyncStorage.getItem(\"theme\");\n    if (savedTheme) setTheme(savedTheme);\n  };\n\n  const toggleTheme = async () => {\n    const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n    setTheme(newTheme);\n    await AsyncStorage.setItem(\"theme\", newTheme);\n  };\n\n  const loadChatHistory = async () => {\n    const savedHistory = await AsyncStorage.getItem(\"chatHistory\");\n    if (savedHistory) setChatHistory(JSON.parse(savedHistory));\n  };\n\n  const saveChatHistory = async () => {\n    await AsyncStorage.setItem(\"chatHistory\", JSON.stringify(chatHistory));\n  };\n\n  const startNewChat = () => {\n    cancelRunningResponse();\n    const newSession = { id: Date.now(), messages: [] };\n    setChatHistory([...chatHistory, newSession]);\n    setSelectedChatIndex(chatHistory.length);\n    setCurrentChat([]);\n  };\n\n  const loadChat = (index) => {\n    cancelRunningResponse();\n    setSelectedChatIndex(index);\n    setCurrentChat(chatHistory[index].messages || []);\n  };\n\n  const deleteChat = (index) => {\n    cancelRunningResponse();\n    const updatedHistory = chatHistory.filter((_, i) => i !== index);\n    setChatHistory(updatedHistory);\n    setSelectedChatIndex(null);\n    setCurrentChat([]);\n    saveChatHistory();\n  };\n\n  const cancelRunningResponse = () => {\n    isCancelled.current = true;\n    currentProcessId.current = null;\n  };\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    cancelRunningResponse();\n    isCancelled.current = false;\n\n    let updatedChat = [...currentChat, { text: input, type: \"user\" }];\n    setCurrentChat(updatedChat);\n    setInput(\"\");\n\n    try {\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`,\n        { contents: [{ parts: [{ text: input }] }] },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n\n      const replyParts = response.data?.candidates?.[0]?.content?.parts || [];\n      let reply = replyParts.map((part) => part.text).join(\"\\n\");\n      const processId = Date.now();\n      currentProcessId.current = processId;\n      const activeSession = selectedChatIndex;\n      await processResponse(reply, processId, activeSession);\n    } catch (error) {\n      setCurrentChat([...updatedChat, { text: \"Error: Unable to fetch response\", type: \"bot\" }]);\n    }\n  };\n\n  const processResponse = async (responseText, processId, activeSession) => {\n    let reply = \"\";\n    const botMessage = { text: \"\", type: \"bot\" };\n    setCurrentChat((prev) => [...prev, botMessage]);\n\n    for (const char of responseText) {\n      if (isCancelled.current || currentProcessId.current !== processId || selectedChatIndex !== activeSession) {\n        break;\n      }\n      reply += char;\n      setCurrentChat((prev) => {\n        const updated = [...prev];\n        updated[updated.length - 1] = { text: reply, type: \"bot\" };\n        return updated;\n      });\n      await new Promise((resolve) => setTimeout(resolve, 20));\n    }\n  };\n\n  const copyToClipboard = (text) => {\n    Clipboard.setString(text);\n    Alert.alert(\"Copied to Clipboard\", text);\n  };\n\n  return (\n    <PaperProvider>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        style={{\n          flex: 1,\n          backgroundColor: theme === \"dark\" ? \"#121212\" : \"#ffffff\",\n          padding: 10,\n        }}\n      >\n        {/* Header Section */}\n        <View style={styles.header}>\n          <Text style={{ fontSize: 20, color: theme === \"dark\" ? \"#fff\" : \"#000\" }}>\n            Chatbot\n          </Text>\n          <Button mode=\"contained\" onPress={toggleTheme}>\n            {theme === \"dark\" ? \"Light Mode\" : \"Dark Mode\"}\n          </Button>\n        </View>\n\n        <FlatList\n          data={currentChat}\n          keyExtractor={(item, index) => index.toString()}\n          renderItem={({ item }) => (\n            <View style={{ marginVertical: 5, alignSelf: item.type === \"user\" ? \"flex-end\" : \"flex-start\" }}>\n              {item.type === \"bot\" ? (\n                <View style={styles.botMessageContainer}>\n                  <SyntaxHighlighter language=\"plaintext\" style={theme === \"dark\" ? oneDark : coy}>\n                    {item.text}\n                  </SyntaxHighlighter>\n                  <TouchableOpacity onPress={() => copyToClipboard(item.text)} style={styles.copyButton}>\n                    <Text style={styles.copyButtonText}>Copy</Text>\n                  </TouchableOpacity>\n                </View>\n              ) : (\n                <Text style={styles.userMessage}>{item.text}</Text>\n              )}\n            </View>\n          )}\n        />\n\n        {/* Input Section */}\n        <View style={styles.inputContainer}>\n          <TextInput\n            style={styles.input(theme)}\n            value={input}\n            onChangeText={setInput}\n            placeholder=\"Type a message...\"\n            placeholderTextColor={theme === \"dark\" ? \"#bbb\" : \"#777\"}\n            onSubmitEditing={sendMessage} // Handle Enter key press\n            returnKeyType=\"send\" // Show \"Send\" button on the keyboard\n          />\n\n\n          <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>\n            <Text style={styles.sendText}>Send</Text>\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    </PaperProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  header: { flexDirection: \"row\", justifyContent: \"space-between\", padding: 10 },\n  userMessage: { color: \"#fff\", backgroundColor: \"#6200ee\", padding: 10, borderRadius: 10 },\n  botMessageContainer: { flexDirection: \"row\", alignItems: \"center\" },\n  copyButton: { marginLeft: 5, backgroundColor: \"#6200ee\", padding: 5, borderRadius: 5 },\n  copyButtonText: { color: \"#fff\", fontSize: 14 },\n  inputContainer: { flexDirection: \"row\", padding: 10 },\n  input: (theme) => ({\n    flex: 1,\n    padding: 10,\n    borderWidth: 1,\n    borderRadius: 10,\n    color: theme === \"dark\" ? \"#fff\" : \"#000\", // White text in dark mode, black in light mode\n    borderColor: theme === \"dark\" ? \"#fff\" : \"#333\", // White border in dark mode, dark gray in light mode\n    backgroundColor: theme === \"dark\" ? \"#333\" : \"#f0f0f0\", // Dark gray background in dark mode, light gray in light mode\n  }), sendButton: { backgroundColor: \"#6200ee\", padding: 10, borderRadius: 10, marginLeft: 10 },\n  sendText: { color: \"#fff\" },\n});\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}