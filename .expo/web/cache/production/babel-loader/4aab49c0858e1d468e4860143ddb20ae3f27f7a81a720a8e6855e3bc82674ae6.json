{"ast":null,"code":"import Platform from\"react-native-web/dist/exports/Platform\";import{typescale}from'./themes/v3/tokens';export const fontConfig={web:{regular:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'400'},medium:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'500'},light:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'300'},thin:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'100'}},ios:{regular:{fontFamily:'System',fontWeight:'400'},medium:{fontFamily:'System',fontWeight:'500'},light:{fontFamily:'System',fontWeight:'300'},thin:{fontFamily:'System',fontWeight:'100'}},default:{regular:{fontFamily:'sans-serif',fontWeight:'normal'},medium:{fontFamily:'sans-serif-medium',fontWeight:'normal'},light:{fontFamily:'sans-serif-light',fontWeight:'normal'},thin:{fontFamily:'sans-serif-thin',fontWeight:'normal'}}};function configureV2Fonts(config){const fonts=Platform.select(Object.assign({},fontConfig,config));return fonts;}function configureV3Fonts(config){if(!config){return typescale;}const isFlatConfig=Object.keys(config).every(key=>typeof config[key]!=='object');if(isFlatConfig){return Object.fromEntries(Object.entries(typescale).map(_ref=>{let[variantName,variantProperties]=_ref;return[variantName,Object.assign({},variantProperties,config)];}));}return Object.assign({},typescale,...Object.entries(config).map(_ref2=>{let[variantName,variantProperties]=_ref2;return{[variantName]:Object.assign({},typescale[variantName],variantProperties)};}));}export default function configureFonts(params){const{isV3=true,config}=params||{};if(isV3){return configureV3Fonts(config);}return configureV2Fonts(config);}","map":{"version":3,"names":["typescale","fontConfig","web","regular","fontFamily","fontWeight","medium","light","thin","ios","default","configureV2Fonts","config","fonts","Platform","select","Object","assign","configureV3Fonts","isFlatConfig","keys","every","key","fromEntries","entries","map","_ref","variantName","variantProperties","_ref2","configureFonts","params","isV3"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\styles\\fonts.tsx"],"sourcesContent":["import { Platform, PlatformOSType } from 'react-native';\n\nimport { typescale } from './themes/v3/tokens';\nimport type { Fonts, MD3Type, MD3Typescale, MD3TypescaleKey } from '../types';\n\nexport const fontConfig = {\n  web: {\n    regular: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '400' as '400',\n    },\n    medium: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '500' as '500',\n    },\n    light: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '300' as '300',\n    },\n    thin: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '100' as '100',\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'System',\n      fontWeight: '400' as '400',\n    },\n    medium: {\n      fontFamily: 'System',\n      fontWeight: '500' as '500',\n    },\n    light: {\n      fontFamily: 'System',\n      fontWeight: '300' as '300',\n    },\n    thin: {\n      fontFamily: 'System',\n      fontWeight: '100' as '100',\n    },\n  },\n  default: {\n    regular: {\n      fontFamily: 'sans-serif',\n      fontWeight: 'normal' as 'normal',\n    },\n    medium: {\n      fontFamily: 'sans-serif-medium',\n      fontWeight: 'normal' as 'normal',\n    },\n    light: {\n      fontFamily: 'sans-serif-light',\n      fontWeight: 'normal' as 'normal',\n    },\n    thin: {\n      fontFamily: 'sans-serif-thin',\n      fontWeight: 'normal' as 'normal',\n    },\n  },\n};\n\ntype MD2FontsConfig = {\n  [platform in PlatformOSType | 'default']?: Fonts;\n};\n\ntype MD3FontsConfig =\n  | {\n      [key in MD3TypescaleKey]: Partial<MD3Type>;\n    }\n  | {\n      [key: string]: MD3Type;\n    }\n  | Partial<MD3Type>;\n\nfunction configureV2Fonts(config: MD2FontsConfig): Fonts {\n  const fonts = Platform.select({ ...fontConfig, ...config }) as Fonts;\n  return fonts;\n}\n\nfunction configureV3Fonts(\n  config: MD3FontsConfig\n): MD3Typescale | (MD3Typescale & { [key: string]: MD3Type }) {\n  if (!config) {\n    return typescale;\n  }\n\n  const isFlatConfig = Object.keys(config).every(\n    (key) => typeof config[key as keyof typeof config] !== 'object'\n  );\n\n  if (isFlatConfig) {\n    return Object.fromEntries(\n      Object.entries(typescale).map(([variantName, variantProperties]) => [\n        variantName,\n        { ...variantProperties, ...config },\n      ])\n    ) as MD3Typescale;\n  }\n\n  return Object.assign(\n    {},\n    typescale,\n    ...Object.entries(config).map(([variantName, variantProperties]) => ({\n      [variantName]: {\n        ...typescale[variantName as MD3TypescaleKey],\n        ...variantProperties,\n      },\n    }))\n  );\n}\n\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: { isV3: false }): Fonts;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: {\n  config?: MD2FontsConfig;\n  isV3: false;\n}): Fonts;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: {\n  config?: Partial<MD3Type>;\n  isV3?: true;\n}): MD3Typescale;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: {\n  config?: Partial<Record<MD3TypescaleKey, Partial<MD3Type>>>;\n  isV3?: true;\n}): MD3Typescale;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: {\n  config: Record<string, MD3Type>;\n  isV3?: true;\n}): MD3Typescale & { [key: string]: MD3Type };\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: any) {\n  const { isV3 = true, config } = params || {};\n\n  if (isV3) {\n    return configureV3Fonts(config);\n  }\n  return configureV2Fonts(config);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}