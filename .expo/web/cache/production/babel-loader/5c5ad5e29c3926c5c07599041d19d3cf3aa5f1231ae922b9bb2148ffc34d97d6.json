{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"style\",\"status\",\"label\",\"onPress\",\"onLongPress\",\"labelStyle\",\"theme\",\"testID\",\"mode\",\"position\",\"accessibilityLabel\",\"disabled\",\"labelVariant\",\"labelMaxFontSizeMultiplier\",\"rippleColor\",\"background\"];import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Checkbox from'./Checkbox';import CheckboxAndroid from'./CheckboxAndroid';import CheckboxIOS from'./CheckboxIOS';import{useInternalTheme}from'../../core/theming';import TouchableRipple from'../TouchableRipple/TouchableRipple';import Text from'../Typography/Text';const CheckboxItem=_ref=>{let{style,status,label,onPress,onLongPress,labelStyle,theme:themeOverrides,testID,mode,position='trailing',accessibilityLabel=label,disabled,labelVariant='bodyLarge',labelMaxFontSizeMultiplier=1.5,rippleColor,background}=_ref,props=_objectWithoutPropertiesLoose(_ref,_excluded);const theme=useInternalTheme(themeOverrides);const checkboxProps=Object.assign({},props,{status,theme,disabled});const isLeading=position==='leading';let checkbox;if(mode==='android'){checkbox=React.createElement(CheckboxAndroid,checkboxProps);}else if(mode==='ios'){checkbox=React.createElement(CheckboxIOS,checkboxProps);}else{checkbox=React.createElement(Checkbox,checkboxProps);}const textColor=theme.isV3?theme.colors.onSurface:theme.colors.text;const disabledTextColor=theme.isV3?theme.colors.onSurfaceDisabled:theme.colors.disabled;const textAlign=isLeading?'right':'left';const computedStyle={color:disabled?disabledTextColor:textColor,textAlign};return React.createElement(TouchableRipple,{accessibilityLabel:accessibilityLabel,accessibilityRole:\"checkbox\",accessibilityState:{checked:status==='checked',disabled},onPress:onPress,onLongPress:onLongPress,testID:testID,disabled:disabled,rippleColor:rippleColor,theme:theme,background:background},React.createElement(View,{style:[styles.container,style],pointerEvents:\"none\",importantForAccessibility:\"no-hide-descendants\"},isLeading&&checkbox,React.createElement(Text,{variant:labelVariant,testID:`${testID}-text`,maxFontSizeMultiplier:labelMaxFontSizeMultiplier,style:[styles.label,!theme.isV3&&styles.font,computedStyle,labelStyle]},label),!isLeading&&checkbox));};CheckboxItem.displayName='Checkbox.Item';export default CheckboxItem;export{CheckboxItem};const styles=StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{flexShrink:1,flexGrow:1},font:{fontSize:16}});","map":{"version":3,"names":["React","StyleSheet","View","Checkbox","CheckboxAndroid","CheckboxIOS","useInternalTheme","TouchableRipple","Text","CheckboxItem","_ref","style","status","label","onPress","onLongPress","labelStyle","theme","themeOverrides","testID","mode","position","accessibilityLabel","disabled","labelVariant","labelMaxFontSizeMultiplier","rippleColor","background","props","_objectWithoutPropertiesLoose","_excluded","checkboxProps","Object","assign","isLeading","checkbox","createElement","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","accessibilityRole","accessibilityState","checked","styles","container","pointerEvents","importantForAccessibility","variant","maxFontSizeMultiplier","font","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Checkbox\\CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  ColorValue,\n  GestureResponderEvent,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: PressableAndroidRippleConfig;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  onLongPress,\n  labelStyle,\n  theme: themeOverrides,\n  testID,\n  mode,\n  position = 'trailing',\n  accessibilityLabel = label,\n  disabled,\n  labelVariant = 'bodyLarge',\n  labelMaxFontSizeMultiplier = 1.5,\n  rippleColor,\n  background,\n  ...props\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      onLongPress={onLongPress}\n      testID={testID}\n      disabled={disabled}\n      rippleColor={rippleColor}\n      theme={theme}\n      background={background}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          variant={labelVariant}\n          testID={`${testID}-text`}\n          maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n          style={[\n            styles.label,\n            !theme.isV3 && styles.font,\n            computedStyle,\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default CheckboxItem;\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}