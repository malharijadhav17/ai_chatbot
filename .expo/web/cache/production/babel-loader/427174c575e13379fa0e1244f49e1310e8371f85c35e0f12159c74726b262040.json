{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"mode\",\"children\",\"icon\",\"avatar\",\"selected\",\"disabled\",\"background\",\"accessibilityLabel\",\"accessibilityRole\",\"closeIconAccessibilityLabel\",\"onPress\",\"onLongPress\",\"onPressOut\",\"onPressIn\",\"delayLongPress\",\"onClose\",\"closeIcon\",\"textStyle\",\"style\",\"theme\",\"testID\",\"selectedColor\",\"rippleColor\",\"showSelectedOverlay\",\"showSelectedCheck\",\"ellipsizeMode\",\"compact\",\"elevated\",\"maxFontSizeMultiplier\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Pressable from\"react-native-web/dist/exports/Pressable\";import View from\"react-native-web/dist/exports/View\";import useLatestCallback from'use-latest-callback';import{getChipColors}from'./helpers';import{useInternalTheme}from'../../core/theming';import{white}from'../../styles/themes/v2/colors';import hasTouchHandler from'../../utils/hasTouchHandler';import Icon from'../Icon';import MaterialCommunityIcon from'../MaterialCommunityIcon';import Surface from'../Surface';import TouchableRipple from'../TouchableRipple/TouchableRipple';import Text from'../Typography/Text';const Chip=_ref=>{let{mode='flat',children,icon,avatar,selected=false,disabled=false,background,accessibilityLabel,accessibilityRole='button',closeIconAccessibilityLabel='Close',onPress,onLongPress,onPressOut,onPressIn,delayLongPress,onClose,closeIcon,textStyle,style,theme:themeOverrides,testID='chip',selectedColor,rippleColor:customRippleColor,showSelectedOverlay=false,showSelectedCheck=true,ellipsizeMode,compact,elevated=false,maxFontSizeMultiplier}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const theme=useInternalTheme(themeOverrides);const{isV3,roundness}=theme;const{current:elevation}=React.useRef(new Animated.Value(isV3&&elevated?1:0));const hasPassedTouchHandler=hasTouchHandler({onPress,onLongPress,onPressIn,onPressOut});const isOutlined=mode==='outlined';const handlePressIn=useLatestCallback(e=>{const{scale}=theme.animation;onPressIn===null||onPressIn===void 0?void 0:onPressIn(e);Animated.timing(elevation,{toValue:isV3?elevated?2:0:4,duration:200*scale,useNativeDriver:true||Platform.constants.reactNativeVersion.minor<=72}).start();});const handlePressOut=useLatestCallback(e=>{const{scale}=theme.animation;onPressOut===null||onPressOut===void 0?void 0:onPressOut(e);Animated.timing(elevation,{toValue:isV3&&elevated?1:0,duration:150*scale,useNativeDriver:true||Platform.constants.reactNativeVersion.minor<=72}).start();});const opacity=isV3?0.38:0.26;const defaultBorderRadius=roundness*(isV3?2:4);const iconSize=isV3?18:16;const{backgroundColor:customBackgroundColor,borderRadius=defaultBorderRadius}=StyleSheet.flatten(style)||{};const{borderColor,textColor,iconColor,rippleColor,selectedBackgroundColor,backgroundColor}=getChipColors({isOutlined,theme,selectedColor,showSelectedOverlay,customBackgroundColor,disabled,customRippleColor});const accessibilityState={selected,disabled};const elevationStyle=isV3||false?elevation:0;const multiplier=isV3?compact?1.5:2:1;const labelSpacings={marginRight:onClose?0:8*multiplier,marginLeft:avatar||icon||selected&&showSelectedCheck?4*multiplier:8*multiplier};const contentSpacings={paddingRight:isV3?onClose?34:0:onClose?32:4};const labelTextStyle=Object.assign({color:textColor},isV3?theme.fonts.labelLarge:theme.fonts.regular);return React.createElement(Surface,_extends({style:[styles.container,isV3&&(isOutlined?styles.md3OutlineContainer:styles.md3FlatContainer),!theme.isV3&&{elevation:elevationStyle},{backgroundColor:selected?selectedBackgroundColor:backgroundColor,borderColor,borderRadius},style]},theme.isV3&&{elevation:elevationStyle},rest,{testID:`${testID}-container`,theme:theme}),React.createElement(TouchableRipple,{borderless:true,background:background,style:[{borderRadius},styles.touchable],onPress:onPress,onLongPress:onLongPress,onPressIn:hasPassedTouchHandler?handlePressIn:undefined,onPressOut:hasPassedTouchHandler?handlePressOut:undefined,delayLongPress:delayLongPress,rippleColor:rippleColor,disabled:disabled,accessibilityLabel:accessibilityLabel,accessibilityRole:accessibilityRole,accessibilityState:accessibilityState,testID:testID,theme:theme},React.createElement(View,{style:[styles.content,isV3&&styles.md3Content,contentSpacings]},avatar&&!icon?React.createElement(View,{style:[styles.avatarWrapper,isV3&&styles.md3AvatarWrapper,disabled&&{opacity}]},React.isValidElement(avatar)?React.cloneElement(avatar,{style:[styles.avatar,avatar.props.style]}):avatar):null,icon||selected&&showSelectedCheck?React.createElement(View,{style:[styles.icon,isV3&&styles.md3Icon,avatar?[styles.avatar,styles.avatarSelected,isV3&&selected&&styles.md3SelectedIcon]:null]},icon?React.createElement(Icon,{source:icon,color:avatar?white:!disabled&&theme.isV3?theme.colors.primary:iconColor,size:18,theme:theme}):React.createElement(MaterialCommunityIcon,{name:\"check\",color:avatar?white:iconColor,size:18,direction:\"ltr\"})):null,React.createElement(Text,{variant:\"labelLarge\",selectable:false,numberOfLines:1,style:[isV3?styles.md3LabelText:styles.labelText,labelTextStyle,labelSpacings,textStyle],ellipsizeMode:ellipsizeMode,maxFontSizeMultiplier:maxFontSizeMultiplier},children))),onClose?React.createElement(View,{style:styles.closeButtonStyle},React.createElement(Pressable,{onPress:onClose,disabled:disabled,accessibilityRole:\"button\",accessibilityLabel:closeIconAccessibilityLabel},React.createElement(View,{style:[styles.icon,styles.closeIcon,isV3&&styles.md3CloseIcon]},closeIcon?React.createElement(Icon,{source:closeIcon,color:iconColor,size:iconSize}):React.createElement(MaterialCommunityIcon,{name:isV3?'close':'close-circle',size:iconSize,color:iconColor,direction:\"ltr\"})))):null);};const styles=StyleSheet.create({container:{borderWidth:StyleSheet.hairlineWidth,borderStyle:'solid',flexDirection:'row'},md3OutlineContainer:{borderWidth:1},md3FlatContainer:{borderWidth:0},content:{flexDirection:'row',alignItems:'center',paddingLeft:4,position:'relative'},md3Content:{paddingLeft:0},icon:{padding:4,alignSelf:'center'},md3Icon:{paddingLeft:8,paddingRight:0},closeIcon:{marginRight:4},md3CloseIcon:{marginRight:8,padding:0},labelText:{minHeight:24,lineHeight:24,textAlignVertical:'center',marginVertical:4},md3LabelText:{textAlignVertical:'center',marginVertical:6},avatar:{width:24,height:24,borderRadius:12},avatarWrapper:{marginRight:4},md3AvatarWrapper:{marginLeft:4,marginRight:0},md3SelectedIcon:{paddingLeft:4},avatarSelected:{position:'absolute',top:4,left:4,backgroundColor:'rgba(0, 0, 0, .29)'},closeButtonStyle:{position:'absolute',right:0,height:'100%',justifyContent:'center',alignItems:'center'},touchable:{width:'100%'}});export default Chip;","map":{"version":3,"names":["React","Animated","Platform","StyleSheet","Pressable","View","useLatestCallback","getChipColors","useInternalTheme","white","hasTouchHandler","Icon","MaterialCommunityIcon","Surface","TouchableRipple","Text","Chip","_ref","mode","children","icon","avatar","selected","disabled","background","accessibilityLabel","accessibilityRole","closeIconAccessibilityLabel","onPress","onLongPress","onPressOut","onPressIn","delayLongPress","onClose","closeIcon","textStyle","style","theme","themeOverrides","testID","selectedColor","rippleColor","customRippleColor","showSelectedOverlay","showSelectedCheck","ellipsizeMode","compact","elevated","maxFontSizeMultiplier","rest","_objectWithoutPropertiesLoose","_excluded","isV3","roundness","current","elevation","useRef","Value","hasPassedTouchHandler","isOutlined","handlePressIn","e","scale","animation","timing","toValue","duration","useNativeDriver","constants","reactNativeVersion","minor","start","handlePressOut","opacity","defaultBorderRadius","iconSize","backgroundColor","customBackgroundColor","borderRadius","flatten","borderColor","textColor","iconColor","selectedBackgroundColor","accessibilityState","elevationStyle","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","Object","assign","color","fonts","labelLarge","regular","createElement","_extends","styles","container","md3OutlineContainer","md3FlatContainer","borderless","touchable","undefined","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","source","colors","primary","size","name","direction","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Chip\\Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  Pressable,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport { getChipColors } from './helpers';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $Omit, EllipsizeProp, ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   * Note: With theme version 3 `selectedColor` doesn't apply to the `icon`.\n   *       If you want specify custom color for the `icon`, render your own `Icon` component.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether to display default check icon on selected chip.\n   * Note: Check will not be shown if `icon` is specified. If specified, `icon` will be shown regardless of `selected`.\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: PressableAndroidRippleConfig;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n};\n\n/**\n * Chips are compact elements that can represent inputs, attributes, or actions.\n * They can have an icon or avatar on the left, and a close button icon on the right.\n * They are typically used to:\n * <ul>\n *  <li>Present multiple options </li>\n *  <li>Represent attributes active or chosen </li>\n *  <li>Present filter options </li>\n *  <li>Trigger actions related to primary content </li>\n * </ul>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  background,\n  accessibilityLabel,\n  accessibilityRole = 'button',\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onPressOut,\n  onPressIn,\n  delayLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme: themeOverrides,\n  testID = 'chip',\n  selectedColor,\n  rippleColor: customRippleColor,\n  showSelectedOverlay = false,\n  showSelectedCheck = true,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  maxFontSizeMultiplier,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3, roundness } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressIn?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver:\n        Platform.OS === 'web' ||\n        Platform.constants.reactNativeVersion.minor <= 72,\n    }).start();\n  });\n\n  const handlePressOut = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressOut?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver:\n        Platform.OS === 'web' ||\n        Platform.constants.reactNativeVersion.minor <= 72,\n    }).start();\n  });\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = roundness * (isV3 ? 2 : 4);\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    rippleColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n    customRippleColor,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft:\n      avatar || icon || (selected && showSelectedCheck)\n        ? 4 * multiplier\n        : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={[\n        styles.container,\n        isV3 &&\n          (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n        !theme.isV3 && {\n          elevation: elevationStyle,\n        },\n        {\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor,\n          borderRadius,\n        },\n        style,\n      ]}\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n      testID={`${testID}-container`}\n      theme={theme}\n    >\n      <TouchableRipple\n        borderless\n        background={background}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        delayLongPress={delayLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole={accessibilityRole}\n        accessibilityState={accessibilityState}\n        testID={testID}\n        theme={theme}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || (selected && showSelectedCheck) ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                  theme={theme}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n            maxFontSizeMultiplier={maxFontSizeMultiplier}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <Pressable\n            onPress={onClose}\n            disabled={disabled}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </Pressable>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    width: '100%',\n  },\n});\n\nexport default Chip;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}