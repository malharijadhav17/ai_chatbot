{"ast":null,"code":"import React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Pressable from\"react-native-web/dist/exports/Pressable\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import{AdornmentSide}from'./enums';import{getTextColor}from'./utils';import{useInternalTheme}from'../../../core/theming';import{getConstants}from'../helpers';const AffixContext=React.createContext({textStyle:{fontFamily:'',color:''},topPosition:null,side:AdornmentSide.Left});const AffixAdornment=_ref=>{let{affix,side,textStyle,topPosition,onLayout,visible,paddingHorizontal,maxFontSizeMultiplier,testID,disabled}=_ref;return React.createElement(AffixContext.Provider,{value:{side,textStyle,topPosition,onLayout,visible,paddingHorizontal,maxFontSizeMultiplier,testID,disabled}},affix);};const TextInputAffix=_ref2=>{let{text,textStyle:labelStyle,theme:themeOverrides,onLayout:onTextLayout,onPress,accessibilityLabel=text}=_ref2;const theme=useInternalTheme(themeOverrides);const{AFFIX_OFFSET}=getConstants(theme.isV3);const{textStyle,onLayout,topPosition,side,visible,paddingHorizontal,maxFontSizeMultiplier,testID,disabled}=React.useContext(AffixContext);const offset=typeof paddingHorizontal==='number'?paddingHorizontal:AFFIX_OFFSET;const style={top:topPosition,[side]:offset};const textColor=getTextColor({theme,disabled});const content=React.createElement(Text,{maxFontSizeMultiplier:maxFontSizeMultiplier,style:[{color:textColor},textStyle,labelStyle],onLayout:onTextLayout,testID:`${testID}-text`},text);return React.createElement(Animated.View,{style:[styles.container,style,{opacity:(visible===null||visible===void 0?void 0:visible.interpolate({inputRange:[0,1],outputRange:[1,0]}))||1}],onLayout:onLayout,testID:testID},onPress?React.createElement(Pressable,{onPress:onPress,accessibilityRole:\"button\",accessibilityLabel:accessibilityLabel},content):content);};TextInputAffix.displayName='TextInput.Affix';const styles=StyleSheet.create({container:{position:'absolute',justifyContent:'center',alignItems:'center'}});export default TextInputAffix;export{TextInputAffix,AffixAdornment};","map":{"version":3,"names":["React","Animated","Pressable","StyleSheet","Text","AdornmentSide","getTextColor","useInternalTheme","getConstants","AffixContext","createContext","textStyle","fontFamily","color","topPosition","side","Left","AffixAdornment","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","testID","disabled","createElement","Provider","value","TextInputAffix","_ref2","text","labelStyle","theme","themeOverrides","onTextLayout","onPress","accessibilityLabel","AFFIX_OFFSET","isV3","useContext","offset","style","top","textColor","content","View","styles","container","opacity","interpolate","inputRange","outputRange","accessibilityRole","displayName","create","position","justifyContent","alignItems"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  DimensionValue,\n  GestureResponderEvent,\n  LayoutChangeEvent,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport { AdornmentSide } from './enums';\nimport { getTextColor } from './utils';\nimport { useInternalTheme } from '../../../core/theming';\nimport type { ThemeProp } from '../../../types';\nimport { getConstants } from '../helpers';\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the affix. This is read by the screen reader when the user taps the affix.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: DimensionValue;\n  maxFontSizeMultiplier?: number | undefined | null;\n  testID?: string;\n  disabled?: boolean;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n  testID,\n  disabled,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n        testID,\n        disabled,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({\n  text,\n  textStyle: labelStyle,\n  theme: themeOverrides,\n  onLayout: onTextLayout,\n  onPress,\n  accessibilityLabel = text,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { AFFIX_OFFSET } = getConstants(theme.isV3);\n\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID,\n    disabled,\n  } = React.useContext(AffixContext);\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  const textColor = getTextColor({ theme, disabled });\n\n  const content = (\n    <Text\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      style={[{ color: textColor }, textStyle, labelStyle]}\n      onLayout={onTextLayout}\n      testID={`${testID}-text`}\n    >\n      {text}\n    </Text>\n  );\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n      testID={testID}\n    >\n      {onPress ? (\n        <Pressable\n          onPress={onPress}\n          accessibilityRole=\"button\"\n          accessibilityLabel={accessibilityLabel}\n        >\n          {content}\n        </Pressable>\n      ) : (\n        content\n      )}\n    </Animated.View>\n  );\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default TextInputAffix;\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,QAAAC,QAAA,qDAAAC,SAAA,sDAAAC,UAAA,uDAAAC,IAAA,0CAczB,OAASC,aAAa,KAAQ,SAAS,CACvC,OAASC,YAAY,KAAQ,SAAS,CACtC,OAASC,gBAAgB,KAAQ,uBAAuB,CAExD,OAASC,YAAY,KAAQ,YAAY,CAsCzC,KAAM,CAAAC,YAAY,CAAGT,KAAK,CAACU,aAAa,CAAe,CACrDC,SAAS,CAAE,CAAEC,UAAU,CAAE,EAAE,CAAEC,KAAK,CAAE,EAAG,CAAC,CACxCC,WAAW,CAAE,IAAI,CACjBC,IAAI,CAAEV,aAAa,CAACW,IACtB,CAAC,CAAC,CAEF,KAAM,CAAAC,cAKL,CAAGC,IAAA,EAWE,IAXD,CACHC,KAAK,CACLJ,IAAI,CACJJ,SAAS,CACTG,WAAW,CACXM,QAAQ,CACRC,OAAO,CACPC,iBAAiB,CACjBC,qBAAqB,CACrBC,MAAM,CACNC,QACF,CAAC,CAAAP,IAAA,CACC,MACE,CAAAlB,KAAA,CAAA0B,aAAA,CAACjB,YAAY,CAACkB,QAAQ,EACpBC,KAAK,CAAE,CACLb,IAAI,CACJJ,SAAS,CACTG,WAAW,CACXM,QAAQ,CACRC,OAAO,CACPC,iBAAiB,CACjBC,qBAAqB,CACrBC,MAAM,CACNC,QACF,CAAE,EAEDN,KACoB,CAAC,CAE5B,CAAC,CA2BD,KAAM,CAAAU,cAAc,CAAGC,KAAA,EAOV,IAPW,CACtBC,IAAI,CACJpB,SAAS,CAAEqB,UAAU,CACrBC,KAAK,CAAEC,cAAc,CACrBd,QAAQ,CAAEe,YAAY,CACtBC,OAAO,CACPC,kBAAkB,CAAGN,IAChB,CAAC,CAAAD,KAAA,CACN,KAAM,CAAAG,KAAK,CAAG1B,gBAAgB,CAAC2B,cAAc,CAAC,CAC9C,KAAM,CAAEI,YAAa,CAAC,CAAG9B,YAAY,CAACyB,KAAK,CAACM,IAAI,CAAC,CAEjD,KAAM,CACJ5B,SAAS,CACTS,QAAQ,CACRN,WAAW,CACXC,IAAI,CACJM,OAAO,CACPC,iBAAiB,CACjBC,qBAAqB,CACrBC,MAAM,CACNC,QACF,CAAC,CAAGzB,KAAK,CAACwC,UAAU,CAAC/B,YAAY,CAAC,CAElC,KAAM,CAAAgC,MAAM,CACV,MAAO,CAAAnB,iBAAiB,GAAK,QAAQ,CAAGA,iBAAiB,CAAGgB,YAAY,CAE1E,KAAM,CAAAI,KAAK,CAAG,CACZC,GAAG,CAAE7B,WAAW,CAChB,CAACC,IAAI,EAAG0B,MACV,CAAc,CAEd,KAAM,CAAAG,SAAS,CAAGtC,YAAY,CAAC,CAAE2B,KAAK,CAAER,QAAS,CAAC,CAAC,CAEnD,KAAM,CAAAoB,OAAO,CACX7C,KAAA,CAAA0B,aAAA,CAACtB,IAAI,EACHmB,qBAAqB,CAAEA,qBAAsB,CAC7CmB,KAAK,CAAE,CAAC,CAAE7B,KAAK,CAAE+B,SAAU,CAAC,CAAEjC,SAAS,CAAEqB,UAAU,CAAE,CACrDZ,QAAQ,CAAEe,YAAa,CACvBX,MAAM,CAAG,GAAEA,MAAO,OAAO,EAExBO,IACG,CACP,CAED,MACE,CAAA/B,KAAA,CAAA0B,aAAA,CAACzB,QAAQ,CAAC6C,IAAI,EACZJ,KAAK,CAAE,CACLK,MAAM,CAACC,SAAS,CAChBN,KAAK,CACL,CACEO,OAAO,CACL,CAAA5B,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAE6B,WAAW,CAAC,CACnBC,UAAU,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAClBC,WAAW,CAAE,CAAC,CAAC,CAAE,CAAC,CACpB,CAAC,CAAC,GAAI,CACV,CAAC,CACD,CACFhC,QAAQ,CAAEA,QAAS,CACnBI,MAAM,CAAEA,MAAO,EAEdY,OAAO,CACNpC,KAAA,CAAA0B,aAAA,CAACxB,SAAS,EACRkC,OAAO,CAAEA,OAAQ,CACjBiB,iBAAiB,CAAC,QAAQ,CAC1BhB,kBAAkB,CAAEA,kBAAmB,EAEtCQ,OACQ,CAAC,CAEZA,OAEW,CAAC,CAEpB,CAAC,CAEDhB,cAAc,CAACyB,WAAW,CAAG,iBAAiB,CAE9C,KAAM,CAAAP,MAAM,CAAG5C,UAAU,CAACoD,MAAM,CAAC,CAC/BP,SAAS,CAAE,CACTQ,QAAQ,CAAE,UAAU,CACpBC,cAAc,CAAE,QAAQ,CACxBC,UAAU,CAAE,QACd,CACF,CAAC,CAAC,CAEF,cAAe,CAAA7B,cAAc,CAG7B,OAASA,cAAc,CAAEZ,cAAc","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}