{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"leftInset\",\"horizontalInset\",\"style\",\"theme\",\"bold\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{useInternalTheme}from'../core/theming';import{black,white}from'../styles/themes/v2/colors';const Divider=_ref=>{let{leftInset,horizontalInset=false,style,theme:themeOverrides,bold=false}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const theme=useInternalTheme(themeOverrides);const{dark:isDarkTheme,isV3}=theme;const dividerColor=isV3?theme.colors.outlineVariant:color(isDarkTheme?white:black).alpha(0.12).rgb().string();return React.createElement(View,_extends({},rest,{style:[{height:StyleSheet.hairlineWidth,backgroundColor:dividerColor},leftInset&&(isV3?styles.v3LeftInset:styles.leftInset),isV3&&horizontalInset&&styles.horizontalInset,isV3&&bold&&styles.bold,style]}));};const styles=StyleSheet.create({leftInset:{marginLeft:72},v3LeftInset:{marginLeft:16},horizontalInset:{marginLeft:16,marginRight:16},bold:{height:1}});export default Divider;","map":{"version":3,"names":["React","StyleSheet","View","color","useInternalTheme","black","white","Divider","_ref","leftInset","horizontalInset","style","theme","themeOverrides","bold","rest","_objectWithoutPropertiesLoose","_excluded","dark","isDarkTheme","isV3","dividerColor","colors","outlineVariant","alpha","rgb","string","createElement","_extends","height","hairlineWidth","backgroundColor","styles","v3LeftInset","create","marginLeft","marginRight"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../core/theming';\nimport { black, white } from '../styles/themes/v2/colors';\nimport type { $RemoveChildren, ThemeProp } from '../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   * @renamed Renamed from 'inset' to 'leftInset` in v5.x\n   * Whether divider has a left inset.\n   */\n  leftInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider has a horizontal inset on both sides.\n   */\n  horizontalInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider should be bolded.\n   */\n  bold?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({\n  leftInset,\n  horizontalInset = false,\n  style,\n  theme: themeOverrides,\n  bold = false,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { dark: isDarkTheme, isV3 } = theme;\n\n  const dividerColor = isV3\n    ? theme.colors.outlineVariant\n    : color(isDarkTheme ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n\n  return (\n    <View\n      {...rest}\n      style={[\n        { height: StyleSheet.hairlineWidth, backgroundColor: dividerColor },\n        leftInset && (isV3 ? styles.v3LeftInset : styles.leftInset),\n        isV3 && horizontalInset && styles.horizontalInset,\n        isV3 && bold && styles.bold,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  leftInset: {\n    marginLeft: 72,\n  },\n  v3LeftInset: {\n    marginLeft: 16,\n  },\n  horizontalInset: {\n    marginLeft: 16,\n    marginRight: 16,\n  },\n  bold: {\n    height: 1,\n  },\n});\n\nexport default Divider;\n"],"mappings":"idAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,UAAA,uDAAAC,IAAA,0CAG9B,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB,OAASC,gBAAgB,KAAQ,iBAAiB,CAClD,OAASC,KAAK,CAAEC,KAAK,KAAQ,4BAA4B,CA+CzD,KAAM,CAAAC,OAAO,CAAGC,IAAA,EAOH,IAPI,CACfC,SAAS,CACTC,eAAe,CAAG,KAAK,CACvBC,KAAK,CACLC,KAAK,CAAEC,cAAc,CACrBC,IAAI,CAAG,KAEF,CAAC,CAAAN,IAAA,CADHO,IAAA,CAAAC,6BAAA,CACGR,IAAA,CAAAS,SAAA,EACN,KAAM,CAAAL,KAAK,CAAGR,gBAAgB,CAACS,cAAc,CAAC,CAC9C,KAAM,CAAEK,IAAI,CAAEC,WAAW,CAAEC,IAAK,CAAC,CAAGR,KAAK,CAEzC,KAAM,CAAAS,YAAY,CAAGD,IAAI,CACrBR,KAAK,CAACU,MAAM,CAACC,cAAc,CAC3BpB,KAAK,CAACgB,WAAW,CAAGb,KAAK,CAAGD,KAAK,CAAC,CAC/BmB,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAC,CAAC,CACLC,MAAM,CAAC,CAAC,CAEf,MACE,CAAA1B,KAAA,CAAA2B,aAAA,CAACzB,IAAI,CAAA0B,QAAA,IACCb,IAAI,EACRJ,KAAK,CAAE,CACL,CAAEkB,MAAM,CAAE5B,UAAU,CAAC6B,aAAa,CAAEC,eAAe,CAAEV,YAAa,CAAC,CACnEZ,SAAS,GAAKW,IAAI,CAAGY,MAAM,CAACC,WAAW,CAAGD,MAAM,CAACvB,SAAS,CAAC,CAC3DW,IAAI,EAAIV,eAAe,EAAIsB,MAAM,CAACtB,eAAe,CACjDU,IAAI,EAAIN,IAAI,EAAIkB,MAAM,CAAClB,IAAI,CAC3BH,KAAK,CACL,EACH,CAAC,CAEN,CAAC,CAED,KAAM,CAAAqB,MAAM,CAAG/B,UAAU,CAACiC,MAAM,CAAC,CAC/BzB,SAAS,CAAE,CACT0B,UAAU,CAAE,EACd,CAAC,CACDF,WAAW,CAAE,CACXE,UAAU,CAAE,EACd,CAAC,CACDzB,eAAe,CAAE,CACfyB,UAAU,CAAE,EAAE,CACdC,WAAW,CAAE,EACf,CAAC,CACDtB,IAAI,CAAE,CACJe,MAAM,CAAE,CACV,CACF,CAAC,CAAC,CAEF,cAAe,CAAAtB,OAAO","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}