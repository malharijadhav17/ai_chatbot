{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"icon\",\"size\",\"theme\",\"accessibilityLabel\",\"disabled\",\"style\",\"value\",\"status\",\"onPress\",\"rippleColor\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import{ToggleButtonGroupContext}from'./ToggleButtonGroup';import{getToggleButtonColor}from'./utils';import{useInternalTheme}from'../../core/theming';import{black,white}from'../../styles/themes/v2/colors';import{forwardRef}from'../../utils/forwardRef';import IconButton from'../IconButton/IconButton';const ToggleButton=forwardRef((_ref,ref)=>{let{icon,size,theme:themeOverrides,accessibilityLabel,disabled,style,value,status,onPress,rippleColor}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const theme=useInternalTheme(themeOverrides);const borderRadius=theme.roundness;return React.createElement(ToggleButtonGroupContext.Consumer,null,context=>{const checked=context&&context.value===value||status==='checked';const backgroundColor=getToggleButtonColor({theme,checked});const borderColor=theme.isV3?theme.colors.outline:color(theme.dark?white:black).alpha(0.29).rgb().string();return React.createElement(IconButton,_extends({borderless:false,icon:icon,onPress:e=>{if(onPress){onPress(e);}if(context){context.onValueChange(!checked?value:null);}},size:size,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled,selected:checked},disabled:disabled,style:[styles.content,{backgroundColor,borderRadius,borderColor},style],ref:ref,theme:theme,rippleColor:rippleColor},rest));});});const styles=StyleSheet.create({content:{width:42,height:42,margin:0}});export default ToggleButton;export{ToggleButton};","map":{"version":3,"names":["React","StyleSheet","color","ToggleButtonGroupContext","getToggleButtonColor","useInternalTheme","black","white","forwardRef","IconButton","ToggleButton","_ref","ref","icon","size","theme","themeOverrides","accessibilityLabel","disabled","style","value","status","onPress","rippleColor","rest","_objectWithoutPropertiesLoose","_excluded","borderRadius","roundness","createElement","Consumer","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","_extends","borderless","e","onValueChange","accessibilityState","selected","styles","content","create","width","height","margin"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\ToggleButton\\ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n  Animated,\n  ColorValue,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  iconColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  ref?: React.RefObject<View>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = forwardRef<View, Props>(\n  (\n    {\n      icon,\n      size,\n      theme: themeOverrides,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      rippleColor,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(\n          context: { value: string | null; onValueChange: Function } | null\n        ) => {\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          const backgroundColor = getToggleButtonColor({ theme, checked });\n          const borderColor = theme.isV3\n            ? theme.colors.outline\n            : color(theme.dark ? white : black)\n                .alpha(0.29)\n                .rgb()\n                .string();\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityState={{ disabled, selected: checked }}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor,\n                },\n                style,\n              ]}\n              ref={ref}\n              theme={theme}\n              rippleColor={rippleColor}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default ToggleButton;\n\n// @component-docs ignore-next-line\nexport { ToggleButton };\n"],"mappings":"mgBAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,UAAA,gDAW9B,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB,OAASC,wBAAwB,KAAQ,qBAAqB,CAC9D,OAASC,oBAAoB,KAAQ,SAAS,CAC9C,OAASC,gBAAgB,KAAQ,oBAAoB,CACrD,OAASC,KAAK,CAAEC,KAAK,KAAQ,+BAA+B,CAE5D,OAASC,UAAU,KAAQ,wBAAwB,CAEnD,MAAO,CAAAC,UAAU,KAAM,0BAA0B,CAiFjD,KAAM,CAAAC,YAAY,CAAGF,UAAU,CAC7B,CAAAG,IAAA,CAcEC,GAAG,GACA,IAdH,CACEC,IAAI,CACJC,IAAI,CACJC,KAAK,CAAEC,cAAc,CACrBC,kBAAkB,CAClBC,QAAQ,CACRC,KAAK,CACLC,KAAK,CACLC,MAAM,CACNC,OAAO,CACPC,WAEK,CAAC,CAAAZ,IAAA,CADHa,IAAA,CAAAC,6BAAA,CACGd,IAAA,CAAAe,SAAA,EAGR,KAAM,CAAAX,KAAK,CAAGV,gBAAgB,CAACW,cAAc,CAAC,CAC9C,KAAM,CAAAW,YAAY,CAAGZ,KAAK,CAACa,SAAS,CAEpC,MACE,CAAA5B,KAAA,CAAA6B,aAAA,CAAC1B,wBAAwB,CAAC2B,QAAQ,MAE9BC,OAAiE,EAC9D,CACH,KAAM,CAAAC,OAAuB,CAC1BD,OAAO,EAAIA,OAAO,CAACX,KAAK,GAAKA,KAAK,EAAKC,MAAM,GAAK,SAAS,CAE9D,KAAM,CAAAY,eAAe,CAAG7B,oBAAoB,CAAC,CAAEW,KAAK,CAAEiB,OAAQ,CAAC,CAAC,CAChE,KAAM,CAAAE,WAAW,CAAGnB,KAAK,CAACoB,IAAI,CAC1BpB,KAAK,CAACqB,MAAM,CAACC,OAAO,CACpBnC,KAAK,CAACa,KAAK,CAACuB,IAAI,CAAG/B,KAAK,CAAGD,KAAK,CAAC,CAC9BiC,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAC,CAAC,CACLC,MAAM,CAAC,CAAC,CAEf,MACE,CAAAzC,KAAA,CAAA6B,aAAA,CAACpB,UAAU,CAAAiC,QAAA,EACTC,UAAU,CAAE,KAAM,CAClB9B,IAAI,CAAEA,IAAK,CACXS,OAAO,CAAGsB,CAAkC,EAAK,CAC/C,GAAItB,OAAO,CAAE,CACXA,OAAO,CAACsB,CAAC,CAAC,CACZ,CAEA,GAAIb,OAAO,CAAE,CACXA,OAAO,CAACc,aAAa,CAAC,CAACb,OAAO,CAAGZ,KAAK,CAAG,IAAI,CAAC,CAChD,CACF,CAAE,CACFN,IAAI,CAAEA,IAAK,CACXG,kBAAkB,CAAEA,kBAAmB,CACvC6B,kBAAkB,CAAE,CAAE5B,QAAQ,CAAE6B,QAAQ,CAAEf,OAAQ,CAAE,CACpDd,QAAQ,CAAEA,QAAS,CACnBC,KAAK,CAAE,CACL6B,MAAM,CAACC,OAAO,CACd,CACEhB,eAAe,CACfN,YAAY,CACZO,WACF,CAAC,CACDf,KAAK,CACL,CACFP,GAAG,CAAEA,GAAI,CACTG,KAAK,CAAEA,KAAM,CACbQ,WAAW,CAAEA,WAAY,EACrBC,IAAI,CACT,CAAC,CAEN,CACiC,CAAC,CAExC,CACF,CAAC,CAED,KAAM,CAAAwB,MAAM,CAAG/C,UAAU,CAACiD,MAAM,CAAC,CAC/BD,OAAO,CAAE,CACPE,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,EAAE,CACVC,MAAM,CAAE,CACV,CACF,CAAC,CAAC,CAEF,cAAe,CAAA3C,YAAY,CAG3B,OAASA,YAAY","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}