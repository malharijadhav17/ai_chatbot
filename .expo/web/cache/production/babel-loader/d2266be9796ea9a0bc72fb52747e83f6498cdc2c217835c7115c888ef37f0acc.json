{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"value\",\"disabled\",\"onValueChange\",\"color\",\"theme\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";import NativeSwitch from\"react-native-web/dist/exports/Switch\";import{getSwitchColor}from'./utils';import{useInternalTheme}from'../../core/theming';const version=NativeModules.PlatformConstants?NativeModules.PlatformConstants.reactNativeVersion:undefined;const Switch=_ref=>{let{value,disabled,onValueChange,color,theme:themeOverrides}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const theme=useInternalTheme(themeOverrides);const{checkedColor,onTintColor,thumbTintColor}=getSwitchColor({theme,disabled,value,color});const props=version&&version.major===0&&version.minor<=56?{onTintColor,thumbTintColor}:true?{activeTrackColor:onTintColor,thumbColor:thumbTintColor,activeThumbColor:checkedColor}:{thumbColor:thumbTintColor,trackColor:{true:onTintColor,false:onTintColor}};return React.createElement(NativeSwitch,_extends({value:value,disabled:disabled,onValueChange:disabled?undefined:onValueChange},props,rest));};export default Switch;","map":{"version":3,"names":["React","NativeModules","Platform","NativeSwitch","getSwitchColor","useInternalTheme","version","PlatformConstants","reactNativeVersion","undefined","Switch","_ref","value","disabled","onValueChange","color","theme","themeOverrides","rest","_objectWithoutPropertiesLoose","_excluded","checkedColor","onTintColor","thumbTintColor","props","major","minor","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","createElement","_extends"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Switch\\Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\n\nimport { getSwitchColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { checkedColor, onTintColor, thumbTintColor } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color,\n  });\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: onTintColor,\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default Switch;\n"],"mappings":"+cAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,aAAA,0DAAAC,QAAA,qDAAAC,YAAA,4CAS9B,OAASC,cAAc,KAAQ,SAAS,CACxC,OAASC,gBAAgB,KAAQ,oBAAoB,CAGrD,KAAM,CAAAC,OAAO,CAAGL,aAAa,CAACM,iBAAiB,CAC3CN,aAAa,CAACM,iBAAiB,CAACC,kBAAkB,CAClDC,SAAS,CA6Cb,KAAM,CAAAC,MAAM,CAAGC,IAAA,EAOF,IAPG,CACdC,KAAK,CACLC,QAAQ,CACRC,aAAa,CACbC,KAAK,CACLC,KAAK,CAAEC,cAEF,CAAC,CAAAN,IAAA,CADHO,IAAA,CAAAC,6BAAA,CACGR,IAAA,CAAAS,SAAA,EACN,KAAM,CAAAJ,KAAK,CAAGX,gBAAgB,CAACY,cAAc,CAAC,CAC9C,KAAM,CAAEI,YAAY,CAAEC,WAAW,CAAEC,cAAe,CAAC,CAAGnB,cAAc,CAAC,CACnEY,KAAK,CACLH,QAAQ,CACRD,KAAK,CACLG,KACF,CAAC,CAAC,CAEF,KAAM,CAAAS,KAAK,CACTlB,OAAO,EAAIA,OAAO,CAACmB,KAAK,GAAK,CAAC,EAAInB,OAAO,CAACoB,KAAK,EAAI,EAAE,CACjD,CACEJ,WAAW,CACXC,cACF,CAAC,CACD,KACA,CACEI,gBAAgB,CAAEL,WAAW,CAC7BM,UAAU,CAAEL,cAAc,CAC1BM,gBAAgB,CAAER,YACpB,CAAC,CACD,CACEO,UAAU,CAAEL,cAAc,CAC1BO,UAAU,CAAE,CACVC,IAAI,CAAET,WAAW,CACjBU,KAAK,CAAEV,WACT,CACF,CAAC,CAEP,MACE,CAAAtB,KAAA,CAAAiC,aAAA,CAAC9B,YAAY,CAAA+B,QAAA,EACXtB,KAAK,CAAEA,KAAM,CACbC,QAAQ,CAAEA,QAAS,CACnBC,aAAa,CAAED,QAAQ,CAAGJ,SAAS,CAAGK,aAAc,EAChDU,KAAK,CACLN,IAAI,CACT,CAAC,CAEN,CAAC,CAED,cAAe,CAAAR,MAAM","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}