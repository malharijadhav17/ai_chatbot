{"ast":null,"code":"import*as React from'react';export const ListAccordionGroupContext=React.createContext(null);const ListAccordionGroup=_ref=>{let{expandedId:expandedIdProp,onAccordionPress,children}=_ref;const[expandedId,setExpandedId]=React.useState(undefined);const onAccordionPressDefault=newExpandedId=>{setExpandedId(currentExpandedId=>currentExpandedId===newExpandedId?undefined:newExpandedId);};return React.createElement(ListAccordionGroupContext.Provider,{value:{expandedId:expandedIdProp||expandedId,onAccordionPress:onAccordionPress||onAccordionPressDefault}},children);};ListAccordionGroup.displayName='List.AccordionGroup';export default ListAccordionGroup;","map":{"version":3,"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","_ref","expandedId","expandedIdProp","onAccordionPress","children","setExpandedId","useState","undefined","onAccordionPressDefault","newExpandedId","currentExpandedId","createElement","Provider","value","displayName"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\List\\ListAccordionGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport type Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext =\n  React.createContext<ListAccordionGroupContextType>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAsB9B,MAAO,MAAM,CAAAC,yBAAyB,CACpCD,KAAK,CAACE,aAAa,CAAgC,IAAI,CAAC,CAmC1D,KAAM,CAAAC,kBAAkB,CAAGC,IAAA,EAId,IAJe,CAC1BC,UAAU,CAAEC,cAAc,CAC1BC,gBAAgB,CAChBC,QACK,CAAC,CAAAJ,IAAA,CACN,KAAM,CAACC,UAAU,CAAEI,aAAa,CAAC,CAAGT,KAAK,CAACU,QAAQ,CAEhDC,SAAS,CAAC,CAEZ,KAAM,CAAAC,uBAAuB,CAAIC,aAA8B,EAAK,CAClEJ,aAAa,CAAEK,iBAAiB,EAC9BA,iBAAiB,GAAKD,aAAa,CAAGF,SAAS,CAAGE,aACpD,CAAC,CACH,CAAC,CAED,MACE,CAAAb,KAAA,CAAAe,aAAA,CAACd,yBAAyB,CAACe,QAAQ,EACjCC,KAAK,CAAE,CACLZ,UAAU,CAAEC,cAAc,EAAID,UAAU,CACxCE,gBAAgB,CAAEA,gBAAgB,EAAIK,uBACxC,CAAE,EAEDJ,QACiC,CAAC,CAEzC,CAAC,CAEDL,kBAAkB,CAACe,WAAW,CAAG,qBAAqB,CAEtD,cAAe,CAAAf,kBAAkB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}