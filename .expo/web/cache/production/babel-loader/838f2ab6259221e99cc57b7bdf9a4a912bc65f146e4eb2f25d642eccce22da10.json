{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"icon\",\"onPress\",\"forceTextInputFocus\",\"color\",\"theme\",\"rippleColor\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{getIconColor}from'./utils';import{useInternalTheme}from'../../../core/theming';import IconButton from'../../IconButton/IconButton';import{ICON_SIZE}from'../constants';import{getConstants}from'../helpers';const StyleContext=React.createContext({style:{},isTextInputFocused:false,forceFocus:()=>{},testID:''});const IconAdornment=_ref=>{let{icon,topPosition,side,isTextInputFocused,forceFocus,testID,theme:themeOverrides,disabled}=_ref;const{isV3}=useInternalTheme(themeOverrides);const{ICON_OFFSET}=getConstants(isV3);const style={top:topPosition,[side]:ICON_OFFSET};const contextState={style,isTextInputFocused,forceFocus,testID,disabled};return React.createElement(StyleContext.Provider,{value:contextState},icon);};const TextInputIcon=_ref2=>{let{icon,onPress,forceTextInputFocus=true,color:customColor,theme:themeOverrides,rippleColor}=_ref2,rest=_objectWithoutPropertiesLoose(_ref2,_excluded);const{style,isTextInputFocused,forceFocus,testID,disabled}=React.useContext(StyleContext);const onPressWithFocusControl=React.useCallback(e=>{if(forceTextInputFocus&&!isTextInputFocused){forceFocus();}onPress===null||onPress===void 0?void 0:onPress(e);},[forceTextInputFocus,forceFocus,isTextInputFocused,onPress]);const theme=useInternalTheme(themeOverrides);const iconColor=getIconColor({theme,disabled,isTextInputFocused,customColor});return React.createElement(View,{style:[styles.container,style]},React.createElement(IconButton,_extends({icon:icon,style:styles.iconButton,size:ICON_SIZE,onPress:onPressWithFocusControl,iconColor:iconColor,testID:testID,theme:themeOverrides,rippleColor:rippleColor},rest)));};TextInputIcon.displayName='TextInput.Icon';const styles=StyleSheet.create({container:{position:'absolute',width:ICON_SIZE,height:ICON_SIZE,justifyContent:'center',alignItems:'center'},iconButton:{margin:0}});export default TextInputIcon;export{IconAdornment};","map":{"version":3,"names":["React","StyleSheet","View","getIconColor","useInternalTheme","IconButton","ICON_SIZE","getConstants","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","_ref","icon","topPosition","side","theme","themeOverrides","disabled","isV3","ICON_OFFSET","top","contextState","createElement","Provider","value","TextInputIcon","_ref2","onPress","forceTextInputFocus","color","customColor","rippleColor","rest","_objectWithoutPropertiesLoose","_excluded","useContext","onPressWithFocusControl","useCallback","e","iconColor","styles","container","_extends","iconButton","size","displayName","create","position","width","height","justifyContent","alignItems","margin"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  ColorValue,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { getIconColor } from './utils';\nimport { useInternalTheme } from '../../../core/theming';\nimport type { $Omit, ThemeProp } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport IconButton from '../../IconButton/IconButton';\nimport { ICON_SIZE } from '../constants';\nimport { getConstants } from '../helpers';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color' | 'iconColor'\n> & {\n  /**\n   * @renamed Renamed from 'name' to 'icon` in v5.x\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n  testID: string;\n  disabled?: boolean;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: '',\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n    theme?: ThemeProp;\n    disabled?: boolean;\n  } & Omit<StyleContextType, 'style'>\n> = ({\n  icon,\n  topPosition,\n  side,\n  isTextInputFocused,\n  forceFocus,\n  testID,\n  theme: themeOverrides,\n  disabled,\n}) => {\n  const { isV3 } = useInternalTheme(themeOverrides);\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = {\n    style,\n    isTextInputFocused,\n    forceFocus,\n    testID,\n    disabled,\n  };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  icon,\n  onPress,\n  forceTextInputFocus = true,\n  color: customColor,\n  theme: themeOverrides,\n  rippleColor,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus, testID, disabled } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(\n    (e: GestureResponderEvent) => {\n      if (forceTextInputFocus && !isTextInputFocused) {\n        forceFocus();\n      }\n\n      onPress?.(e);\n    },\n    [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]\n  );\n\n  const theme = useInternalTheme(themeOverrides);\n\n  const iconColor = getIconColor({\n    theme,\n    disabled,\n    isTextInputFocused,\n    customColor,\n  });\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={icon}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={iconColor}\n        testID={testID}\n        theme={themeOverrides}\n        rippleColor={rippleColor}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}