{"ast":null,"code":"function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import{AdornmentSide,AdornmentType,InputMode}from'./enums';import TextInputAffix,{AffixAdornment}from'./TextInputAffix';import TextInputIcon,{IconAdornment}from'./TextInputIcon';import{getConstants}from'../helpers';export function getAdornmentConfig(_ref){let{left,right}=_ref;let adornmentConfig=[];if(left||right){[{side:AdornmentSide.Left,adornment:left},{side:AdornmentSide.Right,adornment:right}].forEach(_ref2=>{let{side,adornment}=_ref2;if(adornment&&React.isValidElement(adornment)){let type;if(adornment.type===TextInputAffix){type=AdornmentType.Affix;}else if(adornment.type===TextInputIcon){type=AdornmentType.Icon;}adornmentConfig.push({side,type});}});}return adornmentConfig;}export function getAdornmentStyleAdjustmentForNativeInput(_ref3){let{adornmentConfig,leftAffixWidth,rightAffixWidth,paddingHorizontal,inputOffset=0,mode,isV3}=_ref3;const{OUTLINED_INPUT_OFFSET,ADORNMENT_OFFSET}=getConstants(isV3);if(adornmentConfig.length){const adornmentStyleAdjustmentForNativeInput=adornmentConfig.map(_ref4=>{let{type,side}=_ref4;const isLeftSide=side===AdornmentSide.Left;const inputModeAdornemntOffset=mode===InputMode.Outlined?ADORNMENT_OFFSET+OUTLINED_INPUT_OFFSET:ADORNMENT_OFFSET;const paddingKey=`padding${captalize(side)}`;const affixWidth=isLeftSide?leftAffixWidth:rightAffixWidth;const padding=typeof paddingHorizontal==='number'?paddingHorizontal:inputModeAdornemntOffset;const offset=affixWidth+padding;const isAffix=type===AdornmentType.Affix;const marginKey=`margin${captalize(side)}`;return{[marginKey]:isAffix?0:offset,[paddingKey]:isAffix?offset:inputOffset};});const allStyleAdjustmentsMerged=adornmentStyleAdjustmentForNativeInput.reduce((mergedStyles,currentStyle)=>{return Object.assign({},mergedStyles,currentStyle);},{});return allStyleAdjustmentsMerged;}else{return[{}];}}const captalize=text=>text.charAt(0).toUpperCase()+text.slice(1);const TextInputAdornment=_ref5=>{let{adornmentConfig,left,right,onAffixChange,textStyle,visible,topPosition,isTextInputFocused,forceFocus,paddingHorizontal,maxFontSizeMultiplier,theme,disabled}=_ref5;if(adornmentConfig.length){return React.createElement(React.Fragment,null,adornmentConfig.map(_ref6=>{let{type,side}=_ref6;let inputAdornmentComponent;if(side===AdornmentSide.Left){inputAdornmentComponent=left;}else if(side===AdornmentSide.Right){inputAdornmentComponent=right;}const commonProps={side:side,testID:`${side}-${type}-adornment`,isTextInputFocused,paddingHorizontal,disabled};if(type===AdornmentType.Icon){return React.createElement(IconAdornment,_extends({},commonProps,{theme:theme,key:side,icon:inputAdornmentComponent,topPosition:topPosition[AdornmentType.Icon],forceFocus:forceFocus}));}else if(type===AdornmentType.Affix){return React.createElement(AffixAdornment,_extends({},commonProps,{key:side,topPosition:topPosition[AdornmentType.Affix][side],affix:inputAdornmentComponent,textStyle:textStyle,onLayout:onAffixChange[side],visible:visible,maxFontSizeMultiplier:maxFontSizeMultiplier}));}else{return null;}}));}else{return null;}};export default TextInputAdornment;","map":{"version":3,"names":["React","AdornmentSide","AdornmentType","InputMode","TextInputAffix","AffixAdornment","TextInputIcon","IconAdornment","getConstants","getAdornmentConfig","_ref","left","right","adornmentConfig","side","Left","adornment","Right","forEach","_ref2","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","_ref3","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","length","adornmentStyleAdjustmentForNativeInput","map","_ref4","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","Object","assign","text","charAt","toUpperCase","slice","TextInputAdornment","_ref5","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","theme","disabled","createElement","Fragment","_ref6","inputAdornmentComponent","commonProps","testID","_extends","key","icon","affix","onLayout"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n  DimensionValue,\n} from 'react-native';\n\nimport type { ThemeProp } from 'src/types';\n\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { getConstants } from '../helpers';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: DimensionValue;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: DimensionValue;\n  maxFontSizeMultiplier?: number | undefined | null;\n  theme?: ThemeProp;\n  disabled?: boolean;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n  theme,\n  disabled,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n            disabled,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                theme={theme}\n                key={side}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                key={side}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"],"mappings":"2SAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAWzB,OAASC,aAAa,CAAEC,aAAa,CAAEC,SAAS,KAAQ,SAAS,CACjE,MAAO,CAAAC,cAAc,EAAIC,cAAc,KAAQ,kBAAkB,CACjE,MAAO,CAAAC,aAAa,EAAIC,aAAa,KAAQ,iBAAiB,CAK9D,OAASC,YAAY,KAAQ,YAAY,CAEzC,MAAO,SAAS,CAAAC,kBAAkBA,CAAAC,IAAA,CAMP,IANQ,CACjCC,IAAI,CACJC,KAIF,CAAC,CAAAF,IAAA,CACC,GAAI,CAAAG,eAAsB,CAAG,EAAE,CAC/B,GAAIF,IAAI,EAAIC,KAAK,CAAE,CACjB,CACE,CAAEE,IAAI,CAAEb,aAAa,CAACc,IAAI,CAAEC,SAAS,CAAEL,IAAK,CAAC,CAC7C,CAAEG,IAAI,CAAEb,aAAa,CAACgB,KAAK,CAAED,SAAS,CAAEJ,KAAM,CAAC,CAChD,CAACM,OAAO,CAACC,KAAA,EAAyB,IAAxB,CAAEL,IAAI,CAAEE,SAAU,CAAC,CAAAG,KAAA,CAC5B,GAAIH,SAAS,EAAIhB,KAAK,CAACoB,cAAc,CAACJ,SAAS,CAAC,CAAE,CAChD,GAAI,CAAAK,IAAI,CACR,GAAIL,SAAS,CAACK,IAAI,GAAKjB,cAAc,CAAE,CACrCiB,IAAI,CAAGnB,aAAa,CAACoB,KAAK,CAC5B,CAAC,IAAM,IAAIN,SAAS,CAACK,IAAI,GAAKf,aAAa,CAAE,CAC3Ce,IAAI,CAAGnB,aAAa,CAACqB,IAAI,CAC3B,CACAV,eAAe,CAACW,IAAI,CAAC,CACnBV,IAAI,CACJO,IACF,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CACJ,CAEA,MAAO,CAAAR,eAAe,CACxB,CAEA,MAAO,SAAS,CAAAY,yCAAyCA,CAAAC,KAAA,CAgBT,IAhBU,CACxDb,eAAe,CACfc,cAAc,CACdC,eAAe,CACfC,iBAAiB,CACjBC,WAAW,CAAG,CAAC,CACfC,IAAI,CACJC,IASF,CAAC,CAAAN,KAAA,CACC,KAAM,CAAEO,qBAAqB,CAAEC,gBAAiB,CAAC,CAAG1B,YAAY,CAACwB,IAAI,CAAC,CAEtE,GAAInB,eAAe,CAACsB,MAAM,CAAE,CAC1B,KAAM,CAAAC,sCAAsC,CAAGvB,eAAe,CAACwB,GAAG,CAChEC,KAAA,EAAqC,IAApC,CAAEjB,IAAI,CAAEP,IAAsB,CAAC,CAAAwB,KAAA,CAC9B,KAAM,CAAAC,UAAU,CAAGzB,IAAI,GAAKb,aAAa,CAACc,IAAI,CAC9C,KAAM,CAAAyB,wBAAwB,CAC5BT,IAAI,GAAK5B,SAAS,CAACsC,QAAQ,CACvBP,gBAAgB,CAAGD,qBAAqB,CACxCC,gBAAgB,CACtB,KAAM,CAAAQ,UAAU,CAAI,UAASC,SAAS,CAAC7B,IAAI,CAAE,EAAC,CAC9C,KAAM,CAAA8B,UAAU,CAAGL,UAAU,CAAGZ,cAAc,CAAGC,eAAe,CAChE,KAAM,CAAAiB,OAAO,CACX,MAAO,CAAAhB,iBAAiB,GAAK,QAAQ,CACjCA,iBAAiB,CACjBW,wBAAwB,CAC9B,KAAM,CAAAM,MAAM,CAAGF,UAAU,CAAGC,OAAO,CAEnC,KAAM,CAAAE,OAAO,CAAG1B,IAAI,GAAKnB,aAAa,CAACoB,KAAK,CAC5C,KAAM,CAAA0B,SAAS,CAAI,SAAQL,SAAS,CAAC7B,IAAI,CAAE,EAAC,CAE5C,MAAO,CACL,CAACkC,SAAS,EAAGD,OAAO,CAAG,CAAC,CAAGD,MAAM,CACjC,CAACJ,UAAU,EAAGK,OAAO,CAAGD,MAAM,CAAGhB,WACnC,CAAC,CACH,CACF,CAAC,CACD,KAAM,CAAAmB,yBAAyB,CAC7Bb,sCAAsC,CAACc,MAAM,CAC3C,CAACC,YAAY,CAAEC,YAAY,GAAK,CAC9B,OAAAC,MAAA,CAAAC,MAAA,IACKH,YAAY,CACZC,YAAA,EAEP,CAAC,CACD,CAAC,CACH,CAAC,CACH,MAAO,CAAAH,yBAAyB,CAClC,CAAC,IAAM,CACL,MAAO,CAAC,CAAC,CAAC,CAAC,CACb,CACF,CAEA,KAAM,CAAAN,SAAS,CAAIY,IAAY,EAC7BA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CA2B9C,KAAM,CAAAC,kBAAoE,CAAGC,KAAA,EAcvE,IAdwE,CAC5E/C,eAAe,CACfF,IAAI,CACJC,KAAK,CACLiD,aAAa,CACbC,SAAS,CACTC,OAAO,CACPC,WAAW,CACXC,kBAAkB,CAClBC,UAAU,CACVrC,iBAAiB,CACjBsC,qBAAqB,CACrBC,KAAK,CACLC,QACF,CAAC,CAAAT,KAAA,CACC,GAAI/C,eAAe,CAACsB,MAAM,CAAE,CAC1B,MACE,CAAAnC,KAAA,CAAAsE,aAAA,CAAAtE,KAAA,CAAAuE,QAAA,MACG1D,eAAe,CAACwB,GAAG,CAACmC,KAAA,EAAqC,IAApC,CAAEnD,IAAI,CAAEP,IAAsB,CAAC,CAAA0D,KAAA,CACnD,GAAI,CAAAC,uBAAuB,CAC3B,GAAI3D,IAAI,GAAKb,aAAa,CAACc,IAAI,CAAE,CAC/B0D,uBAAuB,CAAG9D,IAAI,CAChC,CAAC,IAAM,IAAIG,IAAI,GAAKb,aAAa,CAACgB,KAAK,CAAE,CACvCwD,uBAAuB,CAAG7D,KAAK,CACjC,CAEA,KAAM,CAAA8D,WAAW,CAAG,CAClB5D,IAAI,CAAEA,IAAI,CACV6D,MAAM,CAAG,GAAE7D,IAAK,IAAGO,IAAK,YAAW,CACnC4C,kBAAkB,CAClBpC,iBAAiB,CACjBwC,QACF,CAAC,CACD,GAAIhD,IAAI,GAAKnB,aAAa,CAACqB,IAAI,CAAE,CAC/B,MACE,CAAAvB,KAAA,CAAAsE,aAAA,CAAC/D,aAAa,CAAAqE,QAAA,IACRF,WAAW,EACfN,KAAK,CAAEA,KAAM,CACbS,GAAG,CAAE/D,IAAK,CACVgE,IAAI,CAAEL,uBAAwB,CAC9BT,WAAW,CAAEA,WAAW,CAAC9D,aAAa,CAACqB,IAAI,CAAE,CAC7C2C,UAAU,CAAEA,UAAW,EACxB,CAAC,CAEN,CAAC,IAAM,IAAI7C,IAAI,GAAKnB,aAAa,CAACoB,KAAK,CAAE,CACvC,MACE,CAAAtB,KAAA,CAAAsE,aAAA,CAACjE,cAAc,CAAAuE,QAAA,IACTF,WAAW,EACfG,GAAG,CAAE/D,IAAK,CACVkD,WAAW,CAAEA,WAAW,CAAC9D,aAAa,CAACoB,KAAK,CAAC,CAACR,IAAI,CAAE,CACpDiE,KAAK,CAAEN,uBAAwB,CAC/BX,SAAS,CAAEA,SAAU,CACrBkB,QAAQ,CAAEnB,aAAa,CAAC/C,IAAI,CAAE,CAC9BiD,OAAO,CAAEA,OAAQ,CACjBI,qBAAqB,CAAEA,qBAAsB,EAC9C,CAAC,CAEN,CAAC,IAAM,CACL,MAAO,KAAI,CACb,CACF,CAAC,CACD,CAAC,CAEP,CAAC,IAAM,CACL,MAAO,KAAI,CACb,CACF,CAAC,CAED,cAAe,CAAAR,kBAAkB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}