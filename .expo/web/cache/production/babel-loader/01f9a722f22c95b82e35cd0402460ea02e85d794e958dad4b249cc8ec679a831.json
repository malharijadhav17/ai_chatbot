{"ast":null,"code":"import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";export default class PortalManager extends React.PureComponent{state={portals:[]};mount=(key,children)=>{this.setState(state=>({portals:[...state.portals,{key,children}]}));};update=(key,children)=>this.setState(state=>({portals:state.portals.map(item=>{if(item.key===key){return Object.assign({},item,{children});}return item;})}));unmount=key=>this.setState(state=>({portals:state.portals.filter(item=>item.key!==key)}));render(){return this.state.portals.map(_ref=>{let{key,children}=_ref;return React.createElement(View,{key:key,collapsable:false,pointerEvents:\"box-none\",style:StyleSheet.absoluteFill},children);});}}","map":{"version":3,"names":["React","View","StyleSheet","PortalManager","PureComponent","state","portals","mount","key","children","setState","update","map","item","Object","assign","unmount","filter","render","_ref","createElement","collapsable","pointerEvents","style","absoluteFill"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Portal\\PortalManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype State = {\n  portals: Array<{\n    key: number;\n    children: React.ReactNode;\n  }>;\n};\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends React.PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  };\n\n  mount = (key: number, children: React.ReactNode) => {\n    this.setState((state) => ({\n      portals: [...state.portals, { key, children }],\n    }));\n  };\n\n  update = (key: number, children: React.ReactNode) =>\n    this.setState((state) => ({\n      portals: state.portals.map((item) => {\n        if (item.key === key) {\n          return { ...item, children };\n        }\n        return item;\n      }),\n    }));\n\n  unmount = (key: number) =>\n    this.setState((state) => ({\n      portals: state.portals.filter((item) => item.key !== key),\n    }));\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}\n      >\n        {children}\n      </View>\n    ));\n  }\n}\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,IAAA,iDAAAC,UAAA,gDAa9B,cAAe,MAAM,CAAAC,aAAa,QAAS,CAAAH,KAAK,CAACI,aAAyB,CACxEC,KAAK,CAAU,CACbC,OAAO,CAAE,EACX,CAAC,CAEDC,KAAK,CAAGA,CAACC,GAAW,CAAEC,QAAyB,GAAK,CAClD,IAAI,CAACC,QAAQ,CAAEL,KAAK,GAAM,CACxBC,OAAO,CAAE,CAAC,GAAGD,KAAK,CAACC,OAAO,CAAE,CAAEE,GAAG,CAAEC,QAAS,CAAC,CAC/C,CAAC,CAAC,CAAC,CACL,CAAC,CAEDE,MAAM,CAAGA,CAACH,GAAW,CAAEC,QAAyB,GAC9C,IAAI,CAACC,QAAQ,CAAEL,KAAK,GAAM,CACxBC,OAAO,CAAED,KAAK,CAACC,OAAO,CAACM,GAAG,CAAEC,IAAI,EAAK,CACnC,GAAIA,IAAI,CAACL,GAAG,GAAKA,GAAG,CAAE,CACpB,OAAAM,MAAA,CAAAC,MAAA,IAAYF,IAAI,EAAEJ,QAAA,GACpB,CACA,MAAO,CAAAI,IAAI,CACb,CAAC,CACH,CAAC,CAAC,CAAC,CAELG,OAAO,CAAIR,GAAW,EACpB,IAAI,CAACE,QAAQ,CAAEL,KAAK,GAAM,CACxBC,OAAO,CAAED,KAAK,CAACC,OAAO,CAACW,MAAM,CAAEJ,IAAI,EAAKA,IAAI,CAACL,GAAG,GAAKA,GAAG,CAC1D,CAAC,CAAC,CAAC,CAELU,MAAMA,CAAA,CAAG,CACP,MAAO,KAAI,CAACb,KAAK,CAACC,OAAO,CAACM,GAAG,CAACO,IAAA,MAAC,CAAEX,GAAG,CAAEC,QAAS,CAAC,CAAAU,IAAA,OAC9C,CAAAnB,KAAA,CAAAoB,aAAA,CAACnB,IAAI,EACHO,GAAG,CAAEA,GAAI,CACTa,WAAW,CACT,KAAK,CAEPC,aAAa,CAAC,UAAU,CACxBC,KAAK,CAAErB,UAAU,CAACsB,YAAa,EAE9Bf,QACG,CAAC,EACR,CAAC,CACJ,CACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}