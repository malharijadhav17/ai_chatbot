{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"component\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import useLatestCallback from'use-latest-callback';import BottomNavigationBar from'./BottomNavigationBar';import BottomNavigationRouteScreen from'./BottomNavigationRouteScreen';import{useInternalTheme}from'../../core/theming';import useAnimatedValueArray from'../../utils/useAnimatedValueArray';const FAR_FAR_AWAY=true?0:9999;const SceneComponent=React.memo(_ref=>{let{component}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);return React.createElement(component,rest);});const BottomNavigation=_ref2=>{let{navigationState,renderScene,renderIcon,renderLabel,renderTouchable,getLabelText,getBadge,getColor,getAccessibilityLabel,getTestID,activeColor,inactiveColor,keyboardHidesNavigationBar=false,barStyle,labeled=true,style,activeIndicatorStyle,sceneAnimationEnabled=false,sceneAnimationType='opacity',sceneAnimationEasing,onTabPress,onTabLongPress,onIndexChange,shifting:shiftingProp,safeAreaInsets,labelMaxFontSizeMultiplier=1,compact:compactProp,testID='bottom-navigation',theme:themeOverrides,getLazy=_ref3=>{let{route}=_ref3;return route.lazy;}}=_ref2;const theme=useInternalTheme(themeOverrides);const{scale}=theme.animation;const compact=compactProp??!theme.isV3;let shifting=shiftingProp??(theme.isV3?false:navigationState.routes.length>3);if(shifting&&navigationState.routes.length<2){shifting=false;console.warn('BottomNavigation needs at least 2 tabs to run shifting animation');}const focusedKey=navigationState.routes[navigationState.index].key;const tabsPositionAnims=useAnimatedValueArray(navigationState.routes.map((_,i)=>i===navigationState.index?0:i>=navigationState.index?1:-1));const offsetsAnims=useAnimatedValueArray(navigationState.routes.map((_,i)=>i===navigationState.index?0:1));const[loaded,setLoaded]=React.useState([focusedKey]);if(!loaded.includes(focusedKey)){setLoaded(loaded=>[...loaded,focusedKey]);}const animateToIndex=React.useCallback(index=>{Animated.parallel([...navigationState.routes.map((_,i)=>Animated.timing(tabsPositionAnims[i],{toValue:i===index?0:i>=index?1:-1,duration:theme.isV3||shifting?150*scale:0,useNativeDriver:true,easing:sceneAnimationEasing}))]).start(_ref4=>{let{finished}=_ref4;if(finished){offsetsAnims.forEach((offset,i)=>{if(i===index){offset.setValue(0);}else{offset.setValue(1);}});}});},[shifting,navigationState.routes,offsetsAnims,scale,tabsPositionAnims,sceneAnimationEasing,theme]);React.useEffect(()=>{animateToIndex(navigationState.index);},[]);const prevNavigationState=React.useRef();React.useEffect(()=>{offsetsAnims.forEach((offset,i)=>{var _prevNavigationState$;if(i===navigationState.index||i===((_prevNavigationState$=prevNavigationState.current)===null||_prevNavigationState$===void 0?void 0:_prevNavigationState$.index)){offset.setValue(0);}});animateToIndex(navigationState.index);},[navigationState.index,animateToIndex,offsetsAnims]);const handleTabPress=useLatestCallback(event=>{onTabPress===null||onTabPress===void 0?void 0:onTabPress(event);if(event.defaultPrevented){return;}const index=navigationState.routes.findIndex(route=>event.route.key===route.key);if(index!==navigationState.index){prevNavigationState.current=navigationState;onIndexChange(index);}});const jumpTo=useLatestCallback(key=>{const index=navigationState.routes.findIndex(route=>route.key===key);prevNavigationState.current=navigationState;onIndexChange(index);});const{routes}=navigationState;const{colors}=theme;return React.createElement(View,{style:[styles.container,style],testID:testID},React.createElement(View,{style:[styles.content,{backgroundColor:colors===null||colors===void 0?void 0:colors.background}]},routes.map((route,index)=>{var _prevNavigationState$2;if(getLazy({route})!==false&&!loaded.includes(route.key)){return null;}const focused=navigationState.index===index;const previouslyFocused=((_prevNavigationState$2=prevNavigationState.current)===null||_prevNavigationState$2===void 0?void 0:_prevNavigationState$2.index)===index;const countAlphaOffscreen=sceneAnimationEnabled&&(focused||previouslyFocused);const renderToHardwareTextureAndroid=sceneAnimationEnabled&&focused;const opacity=sceneAnimationEnabled?tabsPositionAnims[index].interpolate({inputRange:[-1,0,1],outputRange:[0,1,0]}):focused?1:0;const offsetTarget=focused?0:FAR_FAR_AWAY;const top=sceneAnimationEnabled?offsetsAnims[index].interpolate({inputRange:[0,1],outputRange:[0,offsetTarget]}):offsetTarget;const left=sceneAnimationType==='shifting'?tabsPositionAnims[index].interpolate({inputRange:[-1,0,1],outputRange:[-50,0,50]}):0;const zIndex=focused?1:0;return React.createElement(BottomNavigationRouteScreen,{key:route.key,pointerEvents:focused?'auto':'none',accessibilityElementsHidden:!focused,importantForAccessibility:focused?'auto':'no-hide-descendants',index:index,visibility:opacity,style:[StyleSheet.absoluteFill,{zIndex}],collapsable:false,removeClippedSubviews:false?navigationState.index!==index:true},React.createElement(Animated.View,_extends({},false&&{needsOffscreenAlphaCompositing:countAlphaOffscreen},{renderToHardwareTextureAndroid:renderToHardwareTextureAndroid,style:[styles.content,{opacity,transform:[{translateX:left},{translateY:top}]}]}),renderScene({route,jumpTo})));})),React.createElement(BottomNavigationBar,{navigationState:navigationState,renderIcon:renderIcon,renderLabel:renderLabel,renderTouchable:renderTouchable,getLabelText:getLabelText,getBadge:getBadge,getColor:getColor,getAccessibilityLabel:getAccessibilityLabel,getTestID:getTestID,activeColor:activeColor,inactiveColor:inactiveColor,keyboardHidesNavigationBar:keyboardHidesNavigationBar,style:barStyle,activeIndicatorStyle:activeIndicatorStyle,labeled:labeled,animationEasing:sceneAnimationEasing,onTabPress:handleTabPress,onTabLongPress:onTabLongPress,shifting:shifting,safeAreaInsets:safeAreaInsets,labelMaxFontSizeMultiplier:labelMaxFontSizeMultiplier,compact:compact,testID:`${testID}-bar`,theme:theme}));};BottomNavigation.SceneMap=scenes=>{return _ref5=>{let{route,jumpTo}=_ref5;return React.createElement(SceneComponent,{key:route.key,component:scenes[route.key?route.key:''],route:route,jumpTo:jumpTo});};};BottomNavigation.Bar=BottomNavigationBar;export default BottomNavigation;const styles=StyleSheet.create({container:{flex:1,overflow:'hidden'},content:{flex:1}});","map":{"version":3,"names":["React","Animated","Platform","StyleSheet","View","useLatestCallback","BottomNavigationBar","BottomNavigationRouteScreen","useInternalTheme","useAnimatedValueArray","FAR_FAR_AWAY","SceneComponent","memo","_ref","component","rest","_objectWithoutPropertiesLoose","_excluded","createElement","BottomNavigation","_ref2","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","getLabelText","getBadge","getColor","getAccessibilityLabel","getTestID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","style","activeIndicatorStyle","sceneAnimationEnabled","sceneAnimationType","sceneAnimationEasing","onTabPress","onTabLongPress","onIndexChange","shifting","shiftingProp","safeAreaInsets","labelMaxFontSizeMultiplier","compact","compactProp","testID","theme","themeOverrides","getLazy","_ref3","route","lazy","scale","animation","isV3","routes","length","console","warn","focusedKey","index","key","tabsPositionAnims","map","_","i","offsetsAnims","loaded","setLoaded","useState","includes","animateToIndex","useCallback","parallel","timing","toValue","duration","useNativeDriver","easing","start","_ref4","finished","forEach","offset","setValue","useEffect","prevNavigationState","useRef","_prevNavigationState$","current","handleTabPress","event","defaultPrevented","findIndex","jumpTo","colors","styles","container","content","backgroundColor","background","_prevNavigationState$2","focused","previouslyFocused","countAlphaOffscreen","renderToHardwareTextureAndroid","opacity","interpolate","inputRange","outputRange","offsetTarget","top","left","zIndex","pointerEvents","accessibilityElementsHidden","importantForAccessibility","visibility","absoluteFill","collapsable","removeClippedSubviews","_extends","needsOffscreenAlphaCompositing","transform","translateX","translateY","animationEasing","SceneMap","scenes","_ref5","Bar","create","flex","overflow"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\BottomNavigation\\BottomNavigation.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  EasingFunction,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport BottomNavigationBar from './BottomNavigationBar';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport type { IconSource } from '../Icon';\nimport { Props as TouchableRippleProps } from '../TouchableRipple/TouchableRipple';\n\nexport type BaseRoute = {\n  key: string;\n  title?: string;\n  focusedIcon?: IconSource;\n  unfocusedIcon?: IconSource;\n  badge?: string | number | boolean;\n  /**\n   * @deprecated In v5.x works only with theme version 2.\n   */\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n  lazy?: boolean;\n};\n\ntype NavigationState<Route extends BaseRoute> = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps<Route extends BaseRoute> = TouchableRippleProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: ColorValue;\n};\n\nexport type Props<Route extends BaseRoute> = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `false` with theme version 3 and `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   * Note that you need at least 2 tabs be able to run this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * Whether tabs should be spread across the entire width.\n   */\n  compact?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `focusedIcon`:  icon to use as the focused tab icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   * - `unfocusedIcon`:  icon to use as the unfocused tab icon, can be a string, an image source or a react component @supported Available in v5.x with theme version 3\n   * - `color`: color to use as background color for shifting bottom navigation @deprecatedProperty In v5.x works only with theme version 2.\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Favorites', focusedIcon: 'heart', unfocusedIcon: 'heart-outline'},\n   *     { key: 'albums', title: 'Albums', focusedIcon: 'album' },\n   *     { key: 'recents', title: 'Recents', focusedIcon: 'history' },\n   *     { key: 'notifications', title: 'Notifications', focusedIcon: 'bell', unfocusedIcon: 'bell-outline' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState<Route>;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `Pressable` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps<Route>) => React.ReactNode;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get lazy for the current screen. Uses true by default.\n   */\n  getLazy?: (props: { route: Route }) => boolean | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Function to execute on tab long press. It receives the route for the pressed tab, useful for things like custom action when longed pressed.\n   */\n  onTabLongPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * The scene animation effect. Specify `'shifting'` for a different effect.\n   * By default, 'opacity' will be used.\n   */\n  sceneAnimationType?: 'opacity' | 'shifting';\n  /**\n   * The scene animation Easing.\n   */\n  sceneAnimationEasing?: EasingFunction | undefined;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  activeIndicatorStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * BottomNavigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile. If you want to use the navigation bar only see [`BottomNavigation.Bar`](BottomNavigationBar).\n *\n * By default BottomNavigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more information.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const NotificationsRoute = () => <Text>Notifications</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Favorites', focusedIcon: 'heart', unfocusedIcon: 'heart-outline'},\n *     { key: 'albums', title: 'Albums', focusedIcon: 'album' },\n *     { key: 'recents', title: 'Recents', focusedIcon: 'history' },\n *     { key: 'notifications', title: 'Notifications', focusedIcon: 'bell', unfocusedIcon: 'bell-outline' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *     notifications: NotificationsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = <Route extends BaseRoute>({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable,\n  getLabelText,\n  getBadge,\n  getColor,\n  getAccessibilityLabel,\n  getTestID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = Platform.OS === 'android',\n  barStyle,\n  labeled = true,\n  style,\n  activeIndicatorStyle,\n  sceneAnimationEnabled = false,\n  sceneAnimationType = 'opacity',\n  sceneAnimationEasing,\n  onTabPress,\n  onTabLongPress,\n  onIndexChange,\n  shifting: shiftingProp,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n  compact: compactProp,\n  testID = 'bottom-navigation',\n  theme: themeOverrides,\n  getLazy = ({ route }: { route: Route }) => route.lazy,\n}: Props<Route>) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { scale } = theme.animation;\n  const compact = compactProp ?? !theme.isV3;\n  let shifting =\n    shiftingProp ?? (theme.isV3 ? false : navigationState.routes.length > 3);\n\n  if (shifting && navigationState.routes.length < 2) {\n    shifting = false;\n    console.warn(\n      'BottomNavigation needs at least 2 tabs to run shifting animation'\n    );\n  }\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Active state of individual tab item positions:\n   * -1 if they're before the active tab, 0 if they're active, 1 if they're after the active tab\n   */\n  const tabsPositionAnims = useAnimatedValueArray(\n    navigationState.routes.map((_, i) =>\n      i === navigationState.index ? 0 : i >= navigationState.index ? 1 : -1\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      Animated.parallel([\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsPositionAnims[i], {\n            toValue: i === index ? 0 : i >= index ? 1 : -1,\n            duration: theme.isV3 || shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n            easing: sceneAnimationEasing,\n          })\n        ),\n      ]).start(({ finished }) => {\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      scale,\n      tabsPositionAnims,\n      sceneAnimationEasing,\n      theme,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const prevNavigationState = React.useRef<NavigationState<Route>>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = useLatestCallback(\n    (event: { route: Route } & TabPressEvent) => {\n      onTabPress?.(event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      const index = navigationState.routes.findIndex(\n        (route) => event.route.key === route.key\n      );\n\n      if (index !== navigationState.index) {\n        prevNavigationState.current = navigationState;\n        onIndexChange(index);\n      }\n    }\n  );\n\n  const jumpTo = useLatestCallback((key: string) => {\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    prevNavigationState.current = navigationState;\n    onIndexChange(index);\n  });\n\n  const { routes } = navigationState;\n  const { colors } = theme;\n\n  return (\n    <View style={[styles.container, style]} testID={testID}>\n      <View style={[styles.content, { backgroundColor: colors?.background }]}>\n        {routes.map((route, index) => {\n          if (getLazy({ route }) !== false && !loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n          const previouslyFocused =\n            prevNavigationState.current?.index === index;\n          const countAlphaOffscreen =\n            sceneAnimationEnabled && (focused || previouslyFocused);\n          const renderToHardwareTextureAndroid =\n            sceneAnimationEnabled && focused;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsPositionAnims[index].interpolate({\n                inputRange: [-1, 0, 1],\n                outputRange: [0, 1, 0],\n              })\n            : focused\n            ? 1\n            : 0;\n\n          const offsetTarget = focused ? 0 : FAR_FAR_AWAY;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, offsetTarget],\n              })\n            : offsetTarget;\n\n          const left =\n            sceneAnimationType === 'shifting'\n              ? tabsPositionAnims[index].interpolate({\n                  inputRange: [-1, 0, 1],\n                  outputRange: [-50, 0, 50],\n                })\n              : 0;\n\n          const zIndex = focused ? 1 : 0;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { zIndex }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View\n                {...(Platform.OS === 'android' && {\n                  needsOffscreenAlphaCompositing: countAlphaOffscreen,\n                })}\n                renderToHardwareTextureAndroid={renderToHardwareTextureAndroid}\n                style={[\n                  styles.content,\n                  {\n                    opacity,\n                    transform: [{ translateX: left }, { translateY: top }],\n                  },\n                ]}\n              >\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <BottomNavigationBar\n        navigationState={navigationState}\n        renderIcon={renderIcon}\n        renderLabel={renderLabel}\n        renderTouchable={renderTouchable}\n        getLabelText={getLabelText}\n        getBadge={getBadge}\n        getColor={getColor}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getTestID={getTestID}\n        activeColor={activeColor}\n        inactiveColor={inactiveColor}\n        keyboardHidesNavigationBar={keyboardHidesNavigationBar}\n        style={barStyle}\n        activeIndicatorStyle={activeIndicatorStyle}\n        labeled={labeled}\n        animationEasing={sceneAnimationEasing}\n        onTabPress={handleTabPress}\n        onTabLongPress={onTabLongPress}\n        shifting={shifting}\n        safeAreaInsets={safeAreaInsets}\n        labelMaxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n        compact={compact}\n        testID={`${testID}-bar`}\n        theme={theme}\n      />\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = <Route extends BaseRoute>(scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\n// @component ./BottomNavigationBar.tsx\nBottomNavigation.Bar = BottomNavigationBar;\n\nexport default BottomNavigation;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}