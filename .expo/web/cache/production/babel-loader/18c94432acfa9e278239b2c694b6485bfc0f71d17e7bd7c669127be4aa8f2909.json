{"ast":null,"code":"import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{getSegmentedButtonBorderRadius,getSegmentedButtonColors,getSegmentedButtonDensityPadding}from'./utils';import{useInternalTheme}from'../../core/theming';import Icon from'../Icon';import TouchableRipple from'../TouchableRipple/TouchableRipple';import Text from'../Typography/Text';const SegmentedButtonItem=_ref=>{let{checked,accessibilityLabel,disabled,style,labelStyle,showSelectedCheck,checkedColor,uncheckedColor,rippleColor:customRippleColor,background,icon,testID,label,onPress,segment,density='regular',theme:themeOverrides,labelMaxFontSizeMultiplier}=_ref;const theme=useInternalTheme(themeOverrides);const checkScale=React.useRef(new Animated.Value(0)).current;React.useEffect(()=>{if(!showSelectedCheck){return;}if(checked){Animated.spring(checkScale,{toValue:1,useNativeDriver:true}).start();}else{Animated.spring(checkScale,{toValue:0,useNativeDriver:true}).start();}},[checked,checkScale,showSelectedCheck]);const{roundness,isV3}=theme;const{borderColor,textColor,borderWidth,backgroundColor}=getSegmentedButtonColors({checked,theme,disabled,checkedColor,uncheckedColor});const borderRadius=(isV3?5:1)*roundness;const segmentBorderRadius=getSegmentedButtonBorderRadius({theme,segment});const rippleColor=customRippleColor||color(textColor).alpha(0.12).rgb().string();const showIcon=!icon?false:label&&checked?!showSelectedCheck:true;const showCheckedIcon=checked&&showSelectedCheck;const iconSize=isV3?18:16;const iconStyle=Object.assign({marginRight:label?5:showCheckedIcon?3:0},label&&{transform:[{scale:checkScale.interpolate({inputRange:[0,1],outputRange:[1,0]})}]});const buttonStyle=Object.assign({backgroundColor,borderColor,borderWidth,borderRadius},segmentBorderRadius);const paddingVertical=getSegmentedButtonDensityPadding({density});const rippleStyle=Object.assign({borderRadius},segmentBorderRadius);const labelTextStyle=Object.assign({},!isV3?{textTransform:'uppercase',fontWeight:'500'}:theme.fonts.labelLarge,{color:textColor});return React.createElement(View,{style:[buttonStyle,styles.button,style]},React.createElement(TouchableRipple,{borderless:true,onPress:onPress,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled,checked},accessibilityRole:\"button\",disabled:disabled,rippleColor:rippleColor,testID:testID,style:rippleStyle,background:background,theme:theme},React.createElement(View,{style:[styles.content,{paddingVertical}]},showCheckedIcon?React.createElement(Animated.View,{testID:`${testID}-check-icon`,style:[iconStyle,{transform:[{scale:checkScale}]}]},React.createElement(Icon,{source:'check',size:iconSize,color:textColor})):null,showIcon?React.createElement(Animated.View,{testID:`${testID}-icon`,style:iconStyle},React.createElement(Icon,{source:icon,size:iconSize,color:textColor})):null,React.createElement(Text,{variant:\"labelLarge\",style:[styles.label,labelTextStyle,labelStyle],selectable:false,numberOfLines:1,maxFontSizeMultiplier:labelMaxFontSizeMultiplier,testID:`${testID}-label`},label))));};const styles=StyleSheet.create({button:{flex:1,minWidth:76,borderStyle:'solid'},label:{textAlign:'center'},content:{flexDirection:'row',alignItems:'center',justifyContent:'center',paddingVertical:9,paddingHorizontal:16}});export default SegmentedButtonItem;export{SegmentedButtonItem as SegmentedButton};","map":{"version":3,"names":["React","Animated","StyleSheet","View","color","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","useInternalTheme","Icon","TouchableRipple","Text","SegmentedButtonItem","_ref","checked","accessibilityLabel","disabled","style","labelStyle","showSelectedCheck","checkedColor","uncheckedColor","rippleColor","customRippleColor","background","icon","testID","label","onPress","segment","density","theme","themeOverrides","labelMaxFontSizeMultiplier","checkScale","useRef","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","alpha","rgb","string","showIcon","showCheckedIcon","iconSize","iconStyle","Object","assign","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","createElement","styles","button","borderless","accessibilityState","accessibilityRole","content","source","size","variant","selectable","numberOfLines","maxFontSizeMultiplier","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButton"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\SegmentedButtons\\SegmentedButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport type { ThemeProp } from 'src/types';\n\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Custom color for unchecked Text and Icon.\n   */\n  uncheckedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Custom color for checked Text and Icon.\n   */\n  checkedColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: PressableAndroidRippleConfig;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button label.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  labelStyle,\n  showSelectedCheck,\n  checkedColor,\n  uncheckedColor,\n  rippleColor: customRippleColor,\n  background,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n  theme: themeOverrides,\n  labelMaxFontSizeMultiplier,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n      checkedColor,\n      uncheckedColor,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor =\n    customRippleColor || color(textColor).alpha(0.12).rgb().string();\n\n  const showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  const showCheckedIcon = checked && showSelectedCheck;\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n        background={background}\n        theme={theme}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {showCheckedIcon ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} color={textColor} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View testID={`${testID}-icon`} style={iconStyle}>\n              <Icon source={icon} size={iconSize} color={textColor} />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle, labelStyle]}\n            selectable={false}\n            numberOfLines={1}\n            maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n            testID={`${testID}-label`}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nexport { SegmentedButtonItem as SegmentedButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}