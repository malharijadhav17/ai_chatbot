{"ast":null,"code":"import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import{black,white}from'../../styles/themes/v2/colors';const isDark=_ref=>{let{dark,backgroundColor}=_ref;if(typeof dark==='boolean'){return dark;}if(backgroundColor==='transparent'){return false;}if(backgroundColor!=='transparent'){return!color(backgroundColor).isLight();}return false;};const getButtonBackgroundColor=_ref2=>{let{isMode,theme,disabled,customButtonColor}=_ref2;if(customButtonColor&&!disabled){return customButtonColor;}if(theme.isV3){if(disabled){if(isMode('outlined')||isMode('text')){return'transparent';}return theme.colors.surfaceDisabled;}if(isMode('elevated')){return theme.colors.elevation.level1;}if(isMode('contained')){return theme.colors.primary;}if(isMode('contained-tonal')){return theme.colors.secondaryContainer;}}if(isMode('contained')){if(disabled){return color(theme.dark?white:black).alpha(0.12).rgb().string();}return theme.colors.primary;}return'transparent';};const getButtonTextColor=_ref3=>{let{isMode,theme,disabled,customTextColor,backgroundColor,dark}=_ref3;if(customTextColor&&!disabled){return customTextColor;}if(theme.isV3){if(disabled){return theme.colors.onSurfaceDisabled;}if(typeof dark==='boolean'){if(isMode('contained')||isMode('contained-tonal')||isMode('elevated')){return isDark({dark,backgroundColor})?white:black;}}if(isMode('outlined')||isMode('text')||isMode('elevated')){return theme.colors.primary;}if(isMode('contained')){return theme.colors.onPrimary;}if(isMode('contained-tonal')){return theme.colors.onSecondaryContainer;}}if(disabled){return color(theme.dark?white:black).alpha(0.32).rgb().string();}if(isMode('contained')){return isDark({dark,backgroundColor})?white:black;}return theme.colors.primary;};const getButtonBorderColor=_ref4=>{let{isMode,disabled,theme}=_ref4;if(theme.isV3){if(disabled&&isMode('outlined')){return theme.colors.surfaceDisabled;}if(isMode('outlined')){return theme.colors.outline;}}if(isMode('outlined')){return color(theme.dark?white:black).alpha(0.29).rgb().string();}return'transparent';};const getButtonBorderWidth=_ref5=>{let{isMode,theme}=_ref5;if(theme.isV3){if(isMode('outlined')){return 1;}}if(isMode('outlined')){return StyleSheet.hairlineWidth;}return 0;};export const getButtonColors=_ref6=>{let{theme,mode,customButtonColor,customTextColor,disabled,dark}=_ref6;const isMode=modeToCompare=>{return mode===modeToCompare;};const backgroundColor=getButtonBackgroundColor({isMode,theme,disabled,customButtonColor});const textColor=getButtonTextColor({isMode,theme,disabled,customTextColor,backgroundColor,dark});const borderColor=getButtonBorderColor({isMode,theme,disabled});const borderWidth=getButtonBorderWidth({isMode,theme});return{backgroundColor,borderColor,textColor,borderWidth};};","map":{"version":3,"names":["color","black","white","isDark","_ref","dark","backgroundColor","isLight","getButtonBackgroundColor","_ref2","isMode","theme","disabled","customButtonColor","isV3","colors","surfaceDisabled","elevation","level1","primary","secondaryContainer","alpha","rgb","string","getButtonTextColor","_ref3","customTextColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","getButtonBorderColor","_ref4","outline","getButtonBorderWidth","_ref5","StyleSheet","hairlineWidth","getButtonColors","_ref6","mode","modeToCompare","textColor","borderColor","borderWidth"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Button\\utils.tsx"],"sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: InternalTheme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: InternalTheme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}