{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"disabled\",\"onPress\",\"theme\",\"status\",\"value\",\"testID\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{RadioButtonContext}from'./RadioButtonGroup';import{handlePress,isChecked}from'./utils';import{useInternalTheme}from'../../core/theming';import{getSelectionControlIOSColor}from'../Checkbox/utils';import MaterialCommunityIcon from'../MaterialCommunityIcon';import TouchableRipple from'../TouchableRipple/TouchableRipple';const RadioButtonIOS=_ref=>{let{disabled,onPress,theme:themeOverrides,status,value,testID}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const theme=useInternalTheme(themeOverrides);return React.createElement(RadioButtonContext.Consumer,null,context=>{const checked=isChecked({contextValue:context===null||context===void 0?void 0:context.value,status,value})==='checked';const{checkedColor,rippleColor}=getSelectionControlIOSColor({theme,disabled,customColor:rest.color});const opacity=checked?1:0;return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:event=>{handlePress({onPress,value,onValueChange:context===null||context===void 0?void 0:context.onValueChange,event});},accessibilityRole:\"radio\",accessibilityState:{disabled,checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID,theme:theme}),React.createElement(View,{style:{opacity}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:\"check\",size:24,color:checkedColor,direction:\"ltr\"})));});};RadioButtonIOS.displayName='RadioButton.IOS';const styles=StyleSheet.create({container:{borderRadius:18,padding:6}});export default RadioButtonIOS;export{RadioButtonIOS};","map":{"version":3,"names":["React","StyleSheet","View","RadioButtonContext","handlePress","isChecked","useInternalTheme","getSelectionControlIOSColor","MaterialCommunityIcon","TouchableRipple","RadioButtonIOS","_ref","disabled","onPress","theme","themeOverrides","status","value","testID","rest","_objectWithoutPropertiesLoose","_excluded","createElement","Consumer","context","checked","contextValue","checkedColor","rippleColor","customColor","color","opacity","_extends","borderless","undefined","event","onValueChange","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","allowFontScaling","name","size","direction","displayName","create","borderRadius","padding"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\RadioButton\\RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, StyleSheet, View } from 'react-native';\n\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, ThemeProp } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme: themeOverrides,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n        const opacity = checked ? 1 : 0;\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : (event) => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                      event,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n            theme={theme}\n          >\n            <View style={{ opacity }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default RadioButtonIOS;\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"],"mappings":"mdAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,UAAA,uDAAAC,IAAA,0CAG9B,OAASC,kBAAkB,KAAgC,oBAAoB,CAC/E,OAASC,WAAW,CAAEC,SAAS,KAAQ,SAAS,CAChD,OAASC,gBAAgB,KAAQ,oBAAoB,CAErD,OAASC,2BAA2B,KAAQ,mBAAmB,CAC/D,MAAO,CAAAC,qBAAqB,KAAM,0BAA0B,CAC5D,MAAO,CAAAC,eAAe,KAAM,oCAAoC,CAwChE,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAQV,IARW,CACtBC,QAAQ,CACRC,OAAO,CACPC,KAAK,CAAEC,cAAc,CACrBC,MAAM,CACNC,KAAK,CACLC,MAEK,CAAC,CAAAP,IAAA,CADHQ,IAAA,CAAAC,6BAAA,CACGT,IAAA,CAAAU,SAAA,EACN,KAAM,CAAAP,KAAK,CAAGR,gBAAgB,CAACS,cAAc,CAAC,CAE9C,MACE,CAAAf,KAAA,CAAAsB,aAAA,CAACnB,kBAAkB,CAACoB,QAAQ,MACxBC,OAAgC,EAAK,CACrC,KAAM,CAAAC,OAAO,CACXpB,SAAS,CAAC,CACRqB,YAAY,CAAEF,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEP,KAAK,CAC5BD,MAAM,CACNC,KACF,CAAC,CAAC,GAAK,SAAS,CAElB,KAAM,CAAEU,YAAY,CAAEC,WAAY,CAAC,CAAGrB,2BAA2B,CAAC,CAChEO,KAAK,CACLF,QAAQ,CACRiB,WAAW,CAAEV,IAAI,CAACW,KACpB,CAAC,CAAC,CACF,KAAM,CAAAC,OAAO,CAAGN,OAAO,CAAG,CAAC,CAAG,CAAC,CAE/B,MACE,CAAAzB,KAAA,CAAAsB,aAAA,CAACb,eAAe,CAAAuB,QAAA,IACVb,IAAI,EACRc,UAAU,MACVL,WAAW,CAAEA,WAAY,CACzBf,OAAO,CACLD,QAAQ,CACJsB,SAAS,CACRC,KAAK,EAAK,CACT/B,WAAW,CAAC,CACVS,OAAO,CACPI,KAAK,CACLmB,aAAa,CAAEZ,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEY,aAAa,CACrCD,KACF,CAAC,CAAC,CACJ,CACL,CACDE,iBAAiB,CAAC,OAAO,CACzBC,kBAAkB,CAAE,CAAE1B,QAAQ,CAAEa,OAAQ,CAAE,CAC1Cc,uBAAuB,CAAC,QAAQ,CAChCC,KAAK,CAAEC,MAAM,CAACC,SAAU,CACxBxB,MAAM,CAAEA,MAAO,CACfJ,KAAK,CAAEA,KAAM,GAEbd,KAAA,CAAAsB,aAAA,CAACpB,IAAI,EAACsC,KAAK,CAAE,CAAET,OAAQ,CAAE,EACvB/B,KAAA,CAAAsB,aAAA,CAACd,qBAAqB,EACpBmC,gBAAgB,CAAE,KAAM,CACxBC,IAAI,CAAC,OAAO,CACZC,IAAI,CAAE,EAAG,CACTf,KAAK,CAAEH,YAAa,CACpBmB,SAAS,CAAC,KAAK,CAChB,CACG,CACS,CAAC,CAEtB,CAC2B,CAAC,CAElC,CAAC,CAEDpC,cAAc,CAACqC,WAAW,CAAG,iBAAiB,CAE9C,KAAM,CAAAN,MAAM,CAAGxC,UAAU,CAAC+C,MAAM,CAAC,CAC/BN,SAAS,CAAE,CACTO,YAAY,CAAE,EAAE,CAChBC,OAAO,CAAE,CACX,CACF,CAAC,CAAC,CAEF,cAAe,CAAAxC,cAAc,CAG7B,OAASA,cAAc","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}