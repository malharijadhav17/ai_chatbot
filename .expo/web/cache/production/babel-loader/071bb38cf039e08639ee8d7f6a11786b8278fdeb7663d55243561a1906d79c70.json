{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"label\",\"size\",\"style\",\"labelStyle\",\"color\",\"theme\",\"maxFontSizeMultiplier\"],_excluded2=[\"backgroundColor\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import View from\"react-native-web/dist/exports/View\";import{useInternalTheme}from'../../core/theming';import{white}from'../../styles/themes/v2/colors';import getContrastingColor from'../../utils/getContrastingColor';import Text from'../Typography/Text';const defaultSize=64;const AvatarText=_ref=>{var _theme$colors;let{label,size=defaultSize,style,labelStyle,color:customColor,theme:themeOverrides,maxFontSizeMultiplier}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const theme=useInternalTheme(themeOverrides);const _ref2=StyleSheet.flatten(style)||{},{backgroundColor=(_theme$colors=theme.colors)===null||_theme$colors===void 0?void 0:_theme$colors.primary}=_ref2,restStyle=_objectWithoutPropertiesLoose(_ref2,_excluded2);const textColor=customColor??getContrastingColor(backgroundColor,white,'rgba(0, 0, 0, .54)');const{fontScale}=useWindowDimensions();return React.createElement(View,_extends({style:[{width:size,height:size,borderRadius:size/2,backgroundColor},styles.container,restStyle]},rest),React.createElement(Text,{style:[styles.text,{color:textColor,fontSize:size/2,lineHeight:size/fontScale},labelStyle],numberOfLines:1,maxFontSizeMultiplier:maxFontSizeMultiplier},label));};AvatarText.displayName='Avatar.Text';const styles=StyleSheet.create({container:{justifyContent:'center',alignItems:'center'},text:{textAlign:'center',textAlignVertical:'center'}});export default AvatarText;","map":{"version":3,"names":["React","StyleSheet","useWindowDimensions","View","useInternalTheme","white","getContrastingColor","Text","defaultSize","AvatarText","_ref","_theme$colors","label","size","style","labelStyle","color","customColor","theme","themeOverrides","maxFontSizeMultiplier","rest","_objectWithoutPropertiesLoose","_excluded","_ref2","flatten","backgroundColor","colors","primary","restStyle","_excluded2","textColor","fontScale","createElement","_extends","width","height","borderRadius","styles","container","text","fontSize","lineHeight","numberOfLines","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Avatar\\AvatarText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Text from '../Typography/Text';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  labelStyle,\n  color: customColor,\n  theme: themeOverrides,\n  maxFontSizeMultiplier,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { backgroundColor = theme.colors?.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const { fontScale } = useWindowDimensions();\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size / fontScale,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default AvatarText;\n"],"mappings":"ugBAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,QAAAC,UAAA,uDAAAC,mBAAA,gEAAAC,IAAA,0CAU9B,OAASC,gBAAgB,KAAQ,oBAAoB,CACrD,OAASC,KAAK,KAAQ,+BAA+B,CAErD,MAAO,CAAAC,mBAAmB,KAAM,iCAAiC,CACjE,MAAO,CAAAC,IAAI,KAAM,oBAAoB,CAErC,KAAM,CAAAC,WAAW,CAAG,EAAE,CA8CtB,KAAM,CAAAC,UAAU,CAAGC,IAAA,EASN,KAAAC,aAAA,IATO,CAClBC,KAAK,CACLC,IAAI,CAAGL,WAAW,CAClBM,KAAK,CACLC,UAAU,CACVC,KAAK,CAAEC,WAAW,CAClBC,KAAK,CAAEC,cAAc,CACrBC,qBAEK,CAAC,CAAAV,IAAA,CADHW,IAAA,CAAAC,6BAAA,CACGZ,IAAA,CAAAa,SAAA,EACN,KAAM,CAAAL,KAAK,CAAGd,gBAAgB,CAACe,cAAc,CAAC,CAC9C,MAAAK,KAAA,CACEvB,UAAU,CAACwB,OAAO,CAACX,KAAK,CAAC,EAAI,CAAC,CAAC,CAD3B,CAAEY,eAAe,EAAAf,aAAA,CAAGO,KAAK,CAACS,MAAM,UAAAhB,aAAA,iBAAZA,aAAA,CAAciB,OAAsB,CAAC,CAAAJ,KAAA,CAAXK,SAAA,CAAAP,6BAAA,CAAAE,KAAA,CAAAM,UAAA,EAEpD,KAAM,CAAAC,SAAS,CACbd,WAAW,EACXX,mBAAmB,CAACoB,eAAe,CAAErB,KAAK,CAAE,oBAAoB,CAAC,CACnE,KAAM,CAAE2B,SAAU,CAAC,CAAG9B,mBAAmB,CAAC,CAAC,CAE3C,MACE,CAAAF,KAAA,CAAAiC,aAAA,CAAC9B,IAAI,CAAA+B,QAAA,EACHpB,KAAK,CAAE,CACL,CACEqB,KAAK,CAAEtB,IAAI,CACXuB,MAAM,CAAEvB,IAAI,CACZwB,YAAY,CAAExB,IAAI,CAAG,CAAC,CACtBa,eACF,CAAC,CACDY,MAAM,CAACC,SAAS,CAChBV,SAAS,CACT,EACER,IAAI,EAERrB,KAAA,CAAAiC,aAAA,CAAC1B,IAAI,EACHO,KAAK,CAAE,CACLwB,MAAM,CAACE,IAAI,CACX,CACExB,KAAK,CAAEe,SAAS,CAChBU,QAAQ,CAAE5B,IAAI,CAAG,CAAC,CAClB6B,UAAU,CAAE7B,IAAI,CAAGmB,SACrB,CAAC,CACDjB,UAAU,CACV,CACF4B,aAAa,CAAE,CAAE,CACjBvB,qBAAqB,CAAEA,qBAAsB,EAE5CR,KACG,CACF,CAAC,CAEX,CAAC,CAEDH,UAAU,CAACmC,WAAW,CAAG,aAAa,CAEtC,KAAM,CAAAN,MAAM,CAAGrC,UAAU,CAAC4C,MAAM,CAAC,CAC/BN,SAAS,CAAE,CACTO,cAAc,CAAE,QAAQ,CACxBC,UAAU,CAAE,QACd,CAAC,CACDP,IAAI,CAAE,CACJQ,SAAS,CAAE,QAAQ,CACnBC,iBAAiB,CAAE,QACrB,CACF,CAAC,CAAC,CAEF,cAAe,CAAAxC,UAAU","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}