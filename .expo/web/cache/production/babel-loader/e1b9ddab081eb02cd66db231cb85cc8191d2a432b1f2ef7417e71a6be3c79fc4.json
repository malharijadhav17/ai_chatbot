{"ast":null,"code":"import*as React from'react';import PortalConsumer from'./PortalConsumer';import PortalHost,{PortalContext}from'./PortalHost';import{Consumer as SettingsConsumer,Provider as SettingsProvider}from'../../core/settings';import{ThemeProvider,withInternalTheme}from'../../core/theming';class Portal extends React.Component{static Host=PortalHost;render(){const{children,theme}=this.props;return React.createElement(SettingsConsumer,null,settings=>React.createElement(PortalContext.Consumer,null,manager=>React.createElement(PortalConsumer,{manager:manager},React.createElement(SettingsProvider,{value:settings},React.createElement(ThemeProvider,{theme:theme},children)))));}}export default withInternalTheme(Portal);","map":{"version":3,"names":["React","PortalConsumer","PortalHost","PortalContext","Consumer","SettingsConsumer","Provider","SettingsProvider","ThemeProvider","withInternalTheme","Portal","Component","Host","render","children","theme","props","createElement","settings","manager","value"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Portal\\Portal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { InternalTheme } from 'src/types';\n\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport {\n  Consumer as SettingsConsumer,\n  Provider as SettingsProvider,\n} from '../../core/settings';\nimport { ThemeProvider, withInternalTheme } from '../../core/theming';\n\nexport type Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Portal allows rendering a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](PortalHost) component to be rendered somewhere in the parent tree.\n * Note that if you're using the `Provider` component, this already includes a `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withInternalTheme(Portal);\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAI9B,MAAO,CAAAC,cAAc,KAAM,kBAAkB,CAC7C,MAAO,CAAAC,UAAU,EAAIC,aAAa,KAAuB,cAAc,CACvE,OACEC,QAAQ,GAAI,CAAAC,gBAAgB,CAC5BC,QAAQ,GAAI,CAAAC,gBAAgB,KACvB,qBAAqB,CAC5B,OAASC,aAAa,CAAEC,iBAAiB,KAAQ,oBAAoB,CAiCrE,KAAM,CAAAC,MAAM,QAAS,CAAAV,KAAK,CAACW,SAAiB,CAE1C,MAAO,CAAAC,IAAI,CAAGV,UAAU,CAExBW,MAAMA,CAAA,CAAG,CACP,KAAM,CAAEC,QAAQ,CAAEC,KAAM,CAAC,CAAG,IAAI,CAACC,KAAK,CAEtC,MACE,CAAAhB,KAAA,CAAAiB,aAAA,CAACZ,gBAAgB,MACba,QAAQ,EACRlB,KAAA,CAAAiB,aAAA,CAACd,aAAa,CAACC,QAAQ,MACnBe,OAAO,EACPnB,KAAA,CAAAiB,aAAA,CAAChB,cAAc,EAACkB,OAAO,CAAEA,OAAyB,EAChDnB,KAAA,CAAAiB,aAAA,CAACV,gBAAgB,EAACa,KAAK,CAAEF,QAAS,EAChClB,KAAA,CAAAiB,aAAA,CAACT,aAAa,EAACO,KAAK,CAAEA,KAAM,EAAED,QAAwB,CACtC,CACJ,CAEI,CAEV,CAAC,CAEvB,CACF,CAEA,cAAe,CAAAL,iBAAiB,CAACC,MAAM,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}