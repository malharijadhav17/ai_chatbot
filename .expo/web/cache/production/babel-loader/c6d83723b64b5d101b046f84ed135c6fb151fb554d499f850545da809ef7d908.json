{"ast":null,"code":"import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{getContentMaxWidth,getMenuItemColor,MAX_WIDTH,MIN_WIDTH}from'./utils';import{useInternalTheme}from'../../core/theming';import Icon from'../Icon';import TouchableRipple from'../TouchableRipple/TouchableRipple';import Text from'../Typography/Text';const MenuItem=_ref=>{let{leadingIcon,trailingIcon,dense,title,disabled,background,onPress,style,contentStyle,titleStyle,rippleColor:customRippleColor,testID='menu-item',accessibilityLabel,accessibilityState,theme:themeOverrides,titleMaxFontSizeMultiplier=1.5}=_ref;const theme=useInternalTheme(themeOverrides);const{titleColor,iconColor,rippleColor}=getMenuItemColor({theme,disabled,customRippleColor});const{isV3}=theme;const containerPadding=isV3?12:8;const iconWidth=isV3?24:40;const minWidth=MIN_WIDTH-(isV3?12:16);const maxWidth=getContentMaxWidth({isV3,iconWidth,leadingIcon,trailingIcon});const titleTextStyle=Object.assign({color:titleColor},isV3?theme.fonts.bodyLarge:{});const newAccessibilityState=Object.assign({},accessibilityState,{disabled});return React.createElement(TouchableRipple,{style:[styles.container,{paddingHorizontal:containerPadding},dense&&styles.md3DenseContainer,style],onPress:onPress,disabled:disabled,testID:testID,background:background,accessibilityLabel:accessibilityLabel,accessibilityRole:\"menuitem\",accessibilityState:newAccessibilityState,rippleColor:rippleColor},React.createElement(View,{style:styles.row},leadingIcon?React.createElement(View,{style:[!isV3&&styles.item,{width:iconWidth}],pointerEvents:\"box-none\"},React.createElement(Icon,{source:leadingIcon,size:24,color:iconColor})):null,React.createElement(View,{style:[!isV3&&styles.item,styles.content,{minWidth,maxWidth},isV3&&(leadingIcon?styles.md3LeadingIcon:styles.md3WithoutLeadingIcon),contentStyle],pointerEvents:\"none\"},React.createElement(Text,{variant:\"bodyLarge\",selectable:false,numberOfLines:1,testID:`${testID}-title`,style:[!isV3&&styles.title,titleTextStyle,titleStyle],maxFontSizeMultiplier:titleMaxFontSizeMultiplier},title)),isV3&&trailingIcon?React.createElement(View,{style:[!isV3&&styles.item,{width:iconWidth}],pointerEvents:\"box-none\"},React.createElement(Icon,{source:trailingIcon,size:24,color:iconColor})):null));};MenuItem.displayName='Menu.Item';const styles=StyleSheet.create({container:{minWidth:MIN_WIDTH,maxWidth:MAX_WIDTH,height:48,justifyContent:'center'},md3DenseContainer:{height:32},row:{flexDirection:'row'},title:{fontSize:16},item:{marginHorizontal:8},content:{justifyContent:'center'},md3LeadingIcon:{marginLeft:12},md3WithoutLeadingIcon:{marginLeft:4}});export default MenuItem;","map":{"version":3,"names":["React","StyleSheet","View","getContentMaxWidth","getMenuItemColor","MAX_WIDTH","MIN_WIDTH","useInternalTheme","Icon","TouchableRipple","Text","MenuItem","_ref","leadingIcon","trailingIcon","dense","title","disabled","background","onPress","style","contentStyle","titleStyle","rippleColor","customRippleColor","testID","accessibilityLabel","accessibilityState","theme","themeOverrides","titleMaxFontSizeMultiplier","titleColor","iconColor","isV3","containerPadding","iconWidth","minWidth","maxWidth","titleTextStyle","Object","assign","color","fonts","bodyLarge","newAccessibilityState","createElement","styles","container","paddingHorizontal","md3DenseContainer","accessibilityRole","row","item","width","pointerEvents","source","size","content","md3LeadingIcon","md3WithoutLeadingIcon","variant","selectable","numberOfLines","maxFontSizeMultiplier","displayName","create","height","justifyContent","flexDirection","fontSize","marginHorizontal","marginLeft"],"sources":["C:\\Users\\Admin\\Downloads\\ai_chatbot\\node_modules\\react-native-paper\\src\\components\\Menu\\MenuItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  ColorValue,\n  GestureResponderEvent,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  getContentMaxWidth,\n  getMenuItemColor,\n  MAX_WIDTH,\n  MIN_WIDTH,\n} from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * @renamed Renamed from 'icon' to 'leadingIcon' in v5.x\n   *\n   * Leading icon to display for the `MenuItem`.\n   */\n  leadingIcon?: IconSource;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Trailing icon to display for the `MenuItem`.\n   */\n  trailingIcon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Sets min height with densed layout.\n   */\n  dense?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: PressableAndroidRippleConfig;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Specifies the largest possible scale a title font can reach.\n   */\n  titleMaxFontSizeMultiplier?: number;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityState?: AccessibilityState;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item leadingIcon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item leadingIcon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item leadingIcon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item leadingIcon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item leadingIcon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst MenuItem = ({\n  leadingIcon,\n  trailingIcon,\n  dense,\n  title,\n  disabled,\n  background,\n  onPress,\n  style,\n  contentStyle,\n  titleStyle,\n  rippleColor: customRippleColor,\n  testID = 'menu-item',\n  accessibilityLabel,\n  accessibilityState,\n  theme: themeOverrides,\n  titleMaxFontSizeMultiplier = 1.5,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { titleColor, iconColor, rippleColor } = getMenuItemColor({\n    theme,\n    disabled,\n    customRippleColor,\n  });\n  const { isV3 } = theme;\n\n  const containerPadding = isV3 ? 12 : 8;\n\n  const iconWidth = isV3 ? 24 : 40;\n\n  const minWidth = MIN_WIDTH - (isV3 ? 12 : 16);\n\n  const maxWidth = getContentMaxWidth({\n    isV3,\n    iconWidth,\n    leadingIcon,\n    trailingIcon,\n  });\n\n  const titleTextStyle = {\n    color: titleColor,\n    ...(isV3 ? theme.fonts.bodyLarge : {}),\n  };\n\n  const newAccessibilityState = { ...accessibilityState, disabled };\n\n  return (\n    <TouchableRipple\n      style={[\n        styles.container,\n        { paddingHorizontal: containerPadding },\n        dense && styles.md3DenseContainer,\n        style,\n      ]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      background={background}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={newAccessibilityState}\n      rippleColor={rippleColor}\n    >\n      <View style={styles.row}>\n        {leadingIcon ? (\n          <View\n            style={[!isV3 && styles.item, { width: iconWidth }]}\n            pointerEvents=\"box-none\"\n          >\n            <Icon source={leadingIcon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            !isV3 && styles.item,\n            styles.content,\n            { minWidth, maxWidth },\n            isV3 &&\n              (leadingIcon\n                ? styles.md3LeadingIcon\n                : styles.md3WithoutLeadingIcon),\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            variant=\"bodyLarge\"\n            selectable={false}\n            numberOfLines={1}\n            testID={`${testID}-title`}\n            style={[!isV3 && styles.title, titleTextStyle, titleStyle]}\n            maxFontSizeMultiplier={titleMaxFontSizeMultiplier}\n          >\n            {title}\n          </Text>\n        </View>\n        {isV3 && trailingIcon ? (\n          <View\n            style={[!isV3 && styles.item, { width: iconWidth }]}\n            pointerEvents=\"box-none\"\n          >\n            <Icon source={trailingIcon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nMenuItem.displayName = 'Menu.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    minWidth: MIN_WIDTH,\n    maxWidth: MAX_WIDTH,\n    height: 48,\n    justifyContent: 'center',\n  },\n  md3DenseContainer: {\n    height: 32,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n  },\n  md3LeadingIcon: {\n    marginLeft: 12,\n  },\n  md3WithoutLeadingIcon: {\n    marginLeft: 4,\n  },\n});\n\nexport default MenuItem;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}